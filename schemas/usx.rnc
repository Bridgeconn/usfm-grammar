# usx.rnc
# A compact syntax Relax NG Schema for USX 3.0.7

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace usfm = "http://usfm.bible/parse/2023"

usfm:terminal [name="ws" value="/[\u0009-\u000D\u0020\u00A0\u1680\u2000-\u200B\u2028\u2029\u202F\u205F]/"]
usfm:terminal [name="wsnnl" value="/[\u0009\u0020\u00A0\u1680\u2000-\u200B\u2028\u2029\u202F\u205F]/"]
usfm:terminal [name="nl" value="/\u000D?\u000A/"]
usfm:terminal [name="NL" value="/(?:${nl}|\u000D)+/"]
usfm:terminal [name="WS" value="/(?:${ws}|${nl}|$)/"]
usfm:terminal [name="WSS" value="/${ws}*/"]
usfm:terminal [name="TAGEND" value="/(?:${ws}+|(?=[\\|]|$))/"]
usfm:terminal [name="TAGPARMEND" value="/${wsnnl}+/"]
usfm:terminal [name="TEXTEND" value="/${ws}*(?=[\\]|$)/"]
usfm:terminal [name="ATTRIBTEXTEND" value="/${ws}*(?=[\\|])/"]
usfm:terminal [name="TEXT" value="/[^\\]+?(?=[\\]|$)/"]
usfm:terminal [name="TEXTATTRIB" value="/[^\\|]+?(?=[\\|]|$)/"]
usfm:terminal [name="PIPE" value="/${ws}*(?<!\\)\|${ws}*/"]
usfm:alias [name="usfm:tag" def="match" usfm:match [before="'\'" after="TAGEND" afterout="' '"]]
usfm:alias [name="usfm:endtag" def="match" usfm:match [before="'\'" matchref="a" after="'*'" dump="true"]]
usfm:alias [name="usfm:text" def="match" usfm:match[match="TEXT" after="TEXTEND"]]

start = USX

USX = ( Scripture | Peripheral )

Scripture = (
    [usfm:stacked = "true"]
    element usx {
        attribute version { xsd:string { minLength = "3" pattern = "\d+\.\d+(\.\d+)?"} },
        attribute xsi:noNamespaceSchemaLocation { text }?,

        BookIdentification,
        [usfm:seq = "true"]( BookHeaders*,
        BookTitles*,
        BookIntroduction*,
        BookIntroductionEndTitles*,
        BookChapterLabel?,
        Chapter,
        # Chapter is used to separate intro from scripture text.
        # All books will have chapter including the single chapter books: OBA, PHM, 2JN, 3JN, JUD
        ChapterContent+ )
    }
    )

Peripheral = (
    element usx {
        attribute version { xsd:string { minLength = "3" pattern = "\d+\.\d+(\.\d+)?"} },
        attribute xsi:noNamespaceSchemaLocation { text }?,

        (PeripheralBook | PeripheralDividedBook)
    }
    )

PeripheralBook = (
    PeripheralBookIdentification,
    BookHeaders*,
    BookTitles+,
    BookIntroduction*,
    BookIntroductionEndTitles*,
    PeripheralContent+
    )

PeripheralDividedBook = (
    PeripheralDividedBookIdentification,
    
    (PeripheralDivision | PeripheralOther)
    
    )

BookIdentification =
    element book {
        [usfm:grouping="13" usfm:order="-1" usfm:match[]]
        attribute code { BookIdentification.book.code.enum }, # e.g. code="GEN"
        [usfm:order="-2" usfm:tag[before="/${ws}*\\/" beforeout="'\\'" usfm:seq="true"]]
        attribute style { "id" },
        [usfm:seq="true"]([usfm:match[before="/${wsnnl}*/" beforeout="' '" match="/[^\\\n\r]*/"]]
        (text)? # Brief description of the project (optional)
        >> usfm:match[match="NL" matchout="'\n'" dump="true"])
    }
BookIdentification.book.code.enum = (
       "GEN" # Genesis
     | "EXO" # Exodus
     | "LEV" # Leviticus
     | "NUM" # Numbers
     | "DEU" # Deuteronomy
     | "JOS" # Joshua
     | "JDG" # Judges
     | "RUT" # Ruth
     | "1SA" # 1 Samuel
     | "2SA" # 2 Samuel
     | "1KI" # 1 Kings
     | "2KI" # 2 Kings
     | "1CH" # 1 Chronicles
     | "2CH" # 2 Chronicles
     | "EZR" # Ezra
     | "NEH" # Nehemiah
     | "EST" # Esther (Hebrew)
     | "JOB" # Job
     | "PSA" # Psalms
     | "PRO" # Proverbs
     | "ECC" # Ecclesiastes
     | "SNG" # Song of Songs
     | "ISA" # Isaiah
     | "JER" # Jeremiah
     | "LAM" # Lamentations
     | "EZK" # Ezekiel
     | "DAN" # Daniel (Hebrew)
     | "HOS" # Hosea
     | "JOL" # Joel
     | "AMO" # Amos
     | "OBA" # Obadiah
     | "JON" # Jonah
     | "MIC" # Micah
     | "NAM" # Nahum
     | "HAB" # Habakkuk
     | "ZEP" # Zephaniah
     | "HAG" # Haggai
     | "ZEC" # Zechariah
     | "MAL" # Malachi
     | "MAT" # Matthew
     | "MRK" # Mark
     | "LUK" # Luke
     | "JHN" # John
     | "ACT" # Acts
     | "ROM" # Romans
     | "1CO" # 1 Corinthians
     | "2CO" # 2 Corinthians
     | "GAL" # Galatians
     | "EPH" # Ephesians
     | "PHP" # Philippians
     | "COL" # Colossians
     | "1TH" # 1 Thessalonians
     | "2TH" # 2 Thessalonians
     | "1TI" # 1 Timothy
     | "2TI" # 2 Timothy
     | "TIT" # Titus
     | "PHM" # Philemon
     | "HEB" # Hebrews
     | "JAS" # James
     | "1PE" # 1 Peter
     | "2PE" # 2 Peter
     | "1JN" # 1 John
     | "2JN" # 2 John
     | "3JN" # 3 John
     | "JUD" # Jude
     | "REV" # Revelation
     | "TOB" # Tobit
     | "JDT" # Judith
     | "ESG" # Esther Greek
     | "WIS" # Wisdom of Solomon
     | "SIR" # Sirach (Ecclesiasticus)
     | "BAR" # Baruch
     | "LJE" # Letter of Jeremiah
     | "S3Y" # Song of 3 Young Men
     | "SUS" # Susanna
     | "BEL" # Bel and the Dragon
     | "1MA" # 1 Maccabees
     | "2MA" # 2 Maccabees
     | "3MA" # 3 Maccabees
     | "4MA" # 4 Maccabees
     | "1ES" # 1 Esdras (Greek)
     | "2ES" # 2 Esdras (Latin)
     | "MAN" # Prayer of Manasseh
     | "PS2" # Psalm 151
     | "ODA" # Odes
     | "PSS" # Psalms of Solomon
     | "EZA" # Apocalypse of Ezra
     | "5EZ" # 5 Ezra
     | "6EZ" # 6 Ezra
     | "DAG" # Daniel Greek
     | "PS3" # Psalms 152-155
     | "2BA" # 2 Baruch (Apocalypse)
     | "LBA" # Letter of Baruch
     | "JUB" # Jubilees
     | "ENO" # Enoch
     | "1MQ" # 1 Meqabyan
     | "2MQ" # 2 Meqabyan
     | "3MQ" # 3 Meqabyan
     | "REP" # Reproof
     | "4BA" # 4 Baruch
     | "LAO" # Laodiceans
     | [usfm:match[]] xsd:string { pattern = "\S{3}" }
     )

PeripheralBookIdentification =
    element book {
        attribute code { PeripheralBookIdentification.book.code.enum }, # e.g. code="CNC"
        attribute style { "id" },
        text? # Brief description of the project (optional)
    }
PeripheralBookIdentification.book.code.enum = (
       "CNC" # Concordance
     | "GLO" # Glossary
     | "TDX" # Topical Index
     | "NDX" # Names Index
     | [usfm:match[]] xsd:string { pattern = "\S{3}" }
     )

PeripheralDividedBookIdentification =
    element book {
        attribute code { PeripheralDividedBookIdentification.book.code.enum }, # e.g. code="FRT"
        attribute style { "id" },
        text? # Brief description of the project (optional)
    }
PeripheralDividedBookIdentification.book.code.enum = (
       "XXA" # Extra A, e.g. a hymnal
     | "XXB" # Extra B
     | "XXC" # Extra C
     | "XXD" # Extra D
     | "XXE" # Extra E
     | "XXF" # Extra F
     | "XXG" # Extra G
     | "FRT" # Front Matter
     | "BAK" # Back Matter
     | "OTH" # Other Matter
     | "INT" # Introduction
     | [usfm:match[]] xsd:string { pattern = "\S{3}" }
     )

PeripheralDivision =
    [usfm:stacked="true" usfm:match[usfm:order="-3" before="'\periph '"]]
    element periph {
        [usfm:match[match="TEXT" after="ATTRIBTEXTEND" usfm:seq="true"]] attribute alt { text }?,
        [usfm:grouping="15" usfm:match[before="PIPE" beforeout="'|'" after="NL" afterout="'\n'" usfm:seq="true"]]
        attribute id { 
              Peripheral.FRT.periph.id.enum
            | Peripheral.INT.periph.id.enum
            | Peripheral.BAK.periph.id.enum
            | Peripheral.OTH.periph.id.enum
            | xsd:string { pattern = "x\-[\p{L}_\-\.:]+" } },
        BookHeaders*,
        BookTitles+,
        BookIntroduction*,
        BookIntroductionEndTitles*,
        PeripheralContent*
    }
Peripheral.FRT.periph.id.enum = (
      "title"
    | "halftitle"
    | "promo"
    | "imprimatur"
    | "pubdata"
    | "foreword"
    | "preface"
    | "contents"
    | "alphacontents"
    | "abbreviations"
    )
Peripheral.INT.periph.id.enum = (
      "intbible"
    | "intot"
    | "intpent"
    | "inthistory"
    | "intpoetry"
    | "intprophesy"
    | "intdc"
    | "intnt"
    | "intgospels"
    | "intepistles"
    | "intletters"
    )
Peripheral.BAK.periph.id.enum = (
      "chron"
    | "measures"
    | "maps"
    | "lxxquotes"
    )
Peripheral.OTH.periph.id.enum = (
      "cover"
    | "spine"
    | [usfm:match[]] xsd:string 
    )

PeripheralOther = (
    BookHeaders*,
    BookTitles*,
    BookIntroduction*,
    BookIntroductionEndTitles*,
    PeripheralContent*
    )

BookHeaders =
    element para {
        [usfm:grouping="8" usfm:tag[]] attribute style { BookHeaders.para.style.enum },
        [usfm:text[]] text?
    }
BookHeaders.para.style.enum = (
      "ide" # File encoding information
    | "h1" # Running header text (DEPRECATED)
    | "h2" # Running header text, left side of page (DEPRECATED)
    | "h3" # Running header text, right side of page (DEPRECATED)
    | "h" # Running header text for a book
    | "toc1" # Long table of contents text
    | "toc2" # Short table of contents text
    | "toc3" # Book Abbreviation
    | "toca1" # Alternative language long table of contents text
    | "toca2" # Alternative language short table of contents text
    | "toca3" # Alternative language book Abbreviation
    | "rem" # Remark
    | "sts" # Status
    | "usfm" # USFM markup version information (may occur if USX was generated from USFM)
    )

BookTitles =
    element para {
        [usfm:tag[]] attribute style { BookTitles.para.style.enum },
        (Footnote | CrossReference | Char | Break | [usfm:text[]] text)*
    }
BookTitles.para.style.enum = (
      "mt1" # The main title of the book (if multiple levels)
    | "mt2" # A secondary title usually occurring before the main title
    | "mt3" # A tertiary title occurring after the main title
    | "mt4"
    | "mt" # The main title of the book (if single level)
    | "imt1" # Introduction major title, level 1 (if multiple levels)
    | "imt2" # Introduction major title, level 2
    | "imt" # Introduction major title, level 1 (if single level)
    | "rem" # Remark
    )

BookIntroduction =
    element para {
        [usfm:grouping="12" usfm:tag[]] attribute style { BookIntroduction.para.style.enum },
        ([usfm:ignore="true"] Reference | Footnote | CrossReference | Char | IntroChar | Milestone | [usfm:text[]] text)*
    } | Table

BookIntroduction.para.style.enum = (
      "imt1" # Introduction major title, level 1 (if multiple levels)
    | "imt2" # Introduction major title, level 2
    | "imt3" # Introduction major title, level 3
    | "imt4" # Introduction major title, level 4 (usually within parenthesis)
    | "imte1" # Introduction major title at introduction end, level 1 (if multiple levels)
    | "imte2" # Introduction major title at introduction end, level 2
    | "imte" # Introduction major title at introduction end, level 1 (if single level)
    | "imt" # Introduction major title, level 1 - (if single level)
    | "ib" # Introduction blank line
    | "ie" # Introduction ending marker
    | "ili1" # A list entry, level 1 (if multiple levels)
    | "ili2" # A list entry, level 2
    | "ili" # A list entry, level 1 (if single level)
    | "imi" # Introduction prose paragraph text, indented, with no first line indent
    | "imq" # Introduction prose paragraph, quote from the body text, with no first line indent
    | "im" # Introduction prose paragraph, with no first line indent (may occur after poetry)
    | "io1" # Introduction outline text, level 1 (if multiple levels)
    | "io2" # Introduction outline text, level 2
    | "io3" # Introduction outline text, level 3
    | "io4" # Introduction outline text, level 4
    | "iot" # Introduction outline title
    | "io" # Introduction outline text, level 1 (if single level)
    | "ipi" # Introduction prose paragraph, indented, with first line indent
    | "ipq" # Introduction prose paragraph, quote from the body text
    | "ipr" # Introduction prose paragraph, right aligned
    | "ip" # Introduction prose paragraph
    | "iq1" # Introduction poetry text, level 1 (if multiple levels)
    | "iq2" # Introduction poetry text, level 2
    | "iq3" # Introduction poetry text, level 3
    | "iq" # Introduction poetry text, level 1 (if single level)
    | "is1" # Introduction section heading, level 1 (if multiple levels)
    | "is2" # Introduction section heading, level 2
    | "is" # Introduction section heading, level 1 (if single level)
    | "iex" # Introduction explanatory or bridge text (e.g. explanation of missing book in Short Old Testament)
    | "rem" # Remark
    )

BookIntroductionEndTitles =
    element para {
        [usfm:tag[]] attribute style { BookIntroductionEndTitles.para.style.enum },
        (Footnote | CrossReference | Char | Milestone | Break | [usfm:text[ahead="'\'"]] text)*
    }
BookIntroductionEndTitles.para.style.enum = (
      "mt1" # The main title of the book (if multiple levels)
    | "mt2" # A secondary title usually occurring before the main title
    | "mt3" # A tertiary title occurring after the main title
    | "mt4" # A small secondary title sometimes occuring within parentheses
    | "mt"  # The main title of the book (if single level)
    | "imt" # Introduction major title, level 1 (if single level)
    | "imt1" # Introduction major title, level 1 (if multiple levels)
    | "imt2" # Introduction major title, level 2
    )

ChapterContent = (Chapter | Section | Para | List | Table | Footnote | CrossReference | Sidebar)

PeripheralContent = (Chapter | Section | Para | List | Table | Footnote | CrossReference | Sidebar)

Section =
    element para {
        [usfm:grouping="15" usfm:tag[id="a" usfm:stacked="true" before="/[\u0009-\u000D\u0020\u00A0\u1680\u2000-\u200B\u2028\u2029\u202F\u205F]*\\/" beforeout="'\n'"]]
        attribute style { Section.para.style.enum },
        attribute vid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9\-:]*" } }?,
        ([usfm:ignore="true"] Reference | Footnote | CrossReference | Char | Milestone | Break | [usfm:text[]] text)*
    }

Section.para.style.enum = (
      "restore" # Comment about when text was restored
    | "iex" # Introduction explanatory or bridge text (e.g. explanation of missing book in Short Old Testament)
    | "ip" # Division or Section introductory paragraph (study Bible)
    | "ms1" # A major section division heading, level 1 (if multiple levels)
    | "ms2" # A major section division heading, level 2
    | "ms3" # A major section division heading, level 3
    | "ms" # A major section division heading, level 1 (if single level)
    | "mr" # A major section division references range heading
    | "mte1" # The main title of the book repeat /ed at the end of the book, level 1 (if multiple levels)
    | "mte2" # A secondary title occurring before or after the 'ending' main title
    | "mte" # The main title of the book repeated at the end of the book, level 1 (if single level)
    | "r" # Parallel reference(s)
    | "s1" # A section heading, level 1 (if multiple levels)
    | "s2" # A section heading, level 2 (e.g. Proverbs 22-24)
    | "sr" # A section division references range heading
    | "sp" # A heading, to identify the speaker (e.g. Job)
    | "sd1" # Semantic division location (vertical space used to divide the text into sections), level 1 (if multiple levels)
    | "sd2" # Semantic division location (vertical space used to divide the text into sections), level 2
    | "sd3" # Semantic division location (vertical space used to divide the text into sections), level 3
    | "sd4" # Semantic division location (vertical space used to divide the text into sections), level 4
    | "sd" # Vertical space used to divide the text into sections, level 1 (if single level)
    | "s" # A section heading, level 1 (if single level)
    | "cl" # Chapter label used for translations that add a word such as "Chapter"
    | "cd" # Chapter Description (Publishing option D, e.g. in Russian Bibles)
    )

Para =
    element para {
        [usfm:grouping="15" usfm:tag[id="a" usfm:stacked="true" before="/[\u0009-\u000D\u0020\u00A0\u1680\u2000-\u200B\u2028\u2029\u202F\u205F]*\\/" beforeout="'\n\\'"]] attribute style { Para.para.style.enum },
        attribute vid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9\-:]*" } }?,
        ([usfm:ignore="true"] Reference | Footnote | CrossReference | Char | Milestone | Verse | Break | [usfm:text[]] text)*
    }

Para.para.style.enum = (
    "cls" # Closure of an Epistle
    | "lit" # For a comment or note inserted for liturgical use
    | "nb" # Paragraph text, with no break from previous paragraph text (at chapter boundary)
    | "pb" # Page Break used for new reader portions and children's bibles where content is controlled by the page
    | "pc" # Inscription (paragraph text centered)
    | "pi1" # Paragraph text, level 1 indent (if multiple levels), with first line indent; often used for discourse
    | "pi2" # Paragraph text, level 2 indent, with first line indent; often used for discourse
    | "pi3" # Paragraph text, level 3 indent, with first line indent; often used for discourse
    | "pi" # Paragraph text, level 1 indent (if single level), with first line indent; often used for discourse
    | "po" # Letter opening
    | "pr" # Text refrain (paragraph right-aligned)
    | "pmo" # Embedded text opening
    | "pmc" # Embedded text closing
    | "pmr" # Embedded text refrain
    | "pm" # Embedded text paragraph
    | "ph1" # Paragraph text, with level 1 hanging indent (if multiple levels)
    | "ph2" # Paragraph text, with level 2 hanging indent
    | "ph3" # Paragraph text, with level 3 hanging indent
    | "ph" # Paragraph text, with level 1 hanging indent (if single level) (DEPRECATED - use para@style li#)
    | "p1" # Front or back matter text paragraph, level 1 (if multiple levels)
    | "p2" # Front or back matter text paragraph, level 2 (if multiple levels)
    | "p" # Paragraph text, with first line indent
    | "q1" # Poetry text, level 1 indent (if multiple levels)
    | "q2" # Poetry text, level 2 indent
    | "q3" # Poetry text, level 3 indent
    | "q4" # Poetry text, level 4 indent
    | "qa" # Poetry text, Acrostic marker/heading
    | "qc" # Poetry text, centered
    | "qr" # Poetry text, Right Aligned
    | "qm1" # Poetry text, embedded, level 1 indent (if multiple levels)
    | "qm2" # Poetry text, embedded, level 2 indent
    | "qm3" # Poetry text, embedded, level 3 indent
    | "qm" # Poetry text, embedded, level 1 indent (if single level)
    | "qd" # A Hebrew musical performance annotation, similar in content to Hebrew descriptive title.
    | "q" # Poetry text, level 1 indent (if single level)
    | "b" # Poetry text stanza break (e.g. stanza break)
    | "d" # A Hebrew text heading, to provide description (e.g. Psalms)
    | "mi" # Paragraph text, indented, with no first line indent; often used for discourse
    | "m" #  Paragraph text, with no first line indent (may occur after poetry) aka: Paragraph Continuation
    | "s3" # A section heading, level 3 (e.g. Genesis "The First Day") (\s3 can take a \v!)
    | "s4" # A section heading, level 4
    | "ts" # Translator's chunk (to identify chunks of text suitable for translating at one time)
    | "k1" # Concordance main entry text or keyword, level 1
    | "k2" # Concordance main entry text or keyword, level 2
    | "rem" # Remark
    | "sts" # Remark
    )

List =
    element para {
        [usfm:grouping="8" usfm:tag[]] attribute style { List.para.style.enum },
        attribute vid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9\-:]*" } }?,
        ([usfm:ignore="true"] Reference | Footnote | CrossReference | Char | ListChar | Milestone | Verse | Break | [usfm:text[]]text)*
    }
List.para.style.enum = (
      "lh" # List header (introductory remark)
    | "li1" # A list entry, level 1 (if multiple levels)
    | "li2" # A list entry, level 2
    | "li3" # A list entry, level 3
    | "li4" # A list entry, level 4
    | "lim1" # An embedded list entry, level 1 (if multiple levels)
    | "lim2" # An embedded list entry, level 2
    | "lim3" # An embedded list entry, level 3
    | "lim4" # An embedded list entry, level 4
    | "lim" # An embedded list entry, level 1 (if single level)
    | "li" # A list entry, level 1 (if single level)
    | "lf" # List footer (introductory remark)
    )

Table = 
    element table {
        attribute vid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9\-:\p{L}\p{Mn}]*" } }?,
        element row {
            [usfm:tag[]]
            attribute style {
                ("tr") # Table row
            },
            ([usfm:ignore="true"]Verse | TableContent)+
        }+
    }
TableContent =
    element cell {
        [usfm:tag[]]
        attribute style { xsd:string { pattern = "t[hc][rc]?\d+" } },
        attribute align { cell.align.enum },
        attribute colspan { xsd:integer }?,
        (Footnote | CrossReference | Char | Milestone | Verse | Break | [usfm:text[]] text)*
    }
           
cell.align.enum = (
      "start" # left in LTR, right in RTL
    | "center" # center
    | "end" # right in LTR, left in RTL
    )

IntroChar =
    element char {
        [usfm:tag[id="a" usfm:seq="true"]] attribute style { IntroChar.char.style.enum },
        char.closed?,
        ([usfm:ignore="true"] Reference | Char | Milestone | Footnote | CrossReference | Break | [usfm:text[]]text)+ # Nested character <char> markup
        >> usfm:endtag[usfm:order="3" ahead="/[^\\]/" usfm:many="?" usfm:seq="true"]
    }
IntroChar.char.style.enum = (
      "ior" # Introduction references range for outline entry; for marking references separately
    | "iqt" # For quoted scripture text appearing in the introduction
    )

CharContent = (
    [usfm:order="2"]
    char.link?,
    [usfm:ignore="true"]char.closed?,
    ([usfm:ignore="true"] Reference | CharEmbed | Milestone | Footnote | CrossReference | Break |
        [usfm:match[match="TEXTATTRIB" after="ATTRIBTEXTEND"]] text)+ # Nested character <char> markup
    )

NoteCharContent = (
    [usfm:order="2"]
    char.link?,
    [usfm:ignore="true"]char.closed?,
    ([usfm:ignore="true"] Reference | NoteCharEmbed | Milestone | Break |
        [usfm:match[match="TEXTATTRIB" after="ATTRIBTEXTEND"]] text)* # Nested character <char> markup
    )

Char = (
    [usfm:stacked="true"]
    element char {
        [usfm:grouping="12" usfm:tag[id="a" usfm:seq="true"]] attribute style { Char.char.style.enum },
        (  ( [usfm:match[match="PIPE" matchout="'|'" dump="true"]]
             (   [usfm:match[match="/[^\\=\n]+(?=\\)/"]] attribute * {xsd:string}
              | ([usfm:matchpair[first="/[^\\\n=&quot;]+/" between="'=&quot;'" second="/[^\\\n&quot;]+/" after="/&quot;${WSS}/"]]
                 attribute * {xsd:string})+
             ),
             ([usfm:order="-1"] CharContent)
            >> usfm:endtag[usfm:order="4"])
         | (CharContent
           >> usfm:endtag[usfm:order="3" ahead="/[^\\]/" usfm:seq="true"]))  # required
    }
    | CharWithAttrib | Figure
    )

Char.char.style.enum = (
      "va" # Second (alternate) verse number (for coding dual numeration in Psalms; see also NRSV Exo 22.1-4)
    | "vp" # Published verse marker - this is a verse marking that would be used in the published text
    | "ca" # Second (alternate) chapter number
    | "qac" # Poetry text, Acrostic markup of the first character of a line of acrostic poetry
    | "qs" # Poetry text, Selah
    | "add" # For a translational addition to the text
    | "addpn" # For chinese words to be dot underline & underline (DEPRECATED - used nested char@style pn)
    | "bk" # For the quoted name of a book
    | "dc" # Deuterocanonical/LXX additions or insertions in the Protocanonical text
    | "efm" # Reference to caller of previous footnote in a study Bible
    | "fm" # Reference to caller of previous footnote
    | "k" # For a keyword
    | "nd" # For name of deity
    | "ndx" # A subject index text item
    | "ord" # For the text portion of an ordinal number
    | "png" # For a geographic proper name
    | "pn" # For a proper name
    | "pro" # For indicating pronunciation in CJK texts (DEPRECATED - used char@style rb)
    | "qt" # For Old Testament quoted text appearing in the New Testament
    | "rq" # A cross-reference indicating the source text for the preceding quotation.
    | "sig" # For the signature of the author of an Epistle
    | "sls" # To represent where the original text is in a secondary language or from an alternate text source
    | "tl" # For transliterated words
    | "wg" # A Greek Wordlist text item
    | "wh" # A Hebrew wordlist text item
    | "wa" # An Aramaic wordlist text item
    | "wj" # For marking the words of Jesus
    | "xt" # A target reference(s)
    | "jmp" # For associating linking attributes to a span of text
    | "no" # A character style, use normal text
    | "it" # A character style, use italic text
    | "bdit" # A character style, use bold + italic text
    | "bd" # A character style, use bold text
    | "em" # A character style, use emphasized text style
    | "sc" # A character style, for small capitalization text
    | "sup" # A character style, for superscript text. Typically for use in critical edition footnotes.
    )

CharEmbed = (
    element char {
        [usfm:stacked="true" usfm:grouping="9" usfm:tag[id="a" before="'\+'" usfm:seq="true"]] attribute style { Char.char.style.enum },
        CharContent
        >> usfm:endtag[usfm:many="?" usfm:order="3" before="'\+'"]
    }
    | CharEmbedWithAttrib | Figure
    )

NoteCharEmbed = (
    element char {
        [usfm:stacked="true" usfm:grouping="9" usfm:tag[id="a" before="'\+'" usfm:seq="true"]] attribute style { Char.char.style.enum },
        NoteCharContent
        >> usfm:endtag[usfm:many="?" usfm:order="3" before="'\+'"]
    }
    | CharEmbedWithAttrib
    )

ListChar = (
    element char {
        [usfm:tag[id="a"]] attribute style { ListChar.char.style.enum },
        char.link?,
        char.closed?,
        ([usfm:ignore="true"] Reference | Char | Milestone | Footnote | CrossReference | Break | [usfm:text[]] text)* # Nested character <char> markup
        >> usfm:endtag[usfm:many="?"]
    }
    )

ListChar.char.style.enum = (
      "litl" # List entry total text
    | "lik" # Structured list entry key text
    | "liv1" # Structured list entrt value 1 content (if multiple values)
    | "liv2" # Structured list entry value 2 content
    | "liv3" # Structured list entry value 3 content
    | "liv4" # Structured list entry value 4 content
    | "liv5" # Structured list entry value 5 content
    | "liv" # Structured list entry value 1 content (if single value)
    )

CharWithAttrib =
    element char {
        [usfm:order="-2" usfm:tag [id="a"]] attribute style { CharWithAttrib.enum },
        char.closed?,
        [usfm:match[match="PIPE" matchout="'|'" dump="true"]]
        ( ([usfm:matchpair[first="/[^\\\n=&quot;]+/" between="'=&quot;'" second="/[^\\\n&quot;]*/" after="/&quot;${WSS}/"]]
                attribute * {xsd:string})+
         | [usfm:name-override="style" usfm:match[match="/[^\\\n=]+(?=\\)/"]] attribute * {xsd:string}
        )?,
        [usfm:order="-1"] ((CharEmbed | [usfm:match[match="TEXTATTRIB"]] text)*)
        >> usfm:endtag[usfm:order="4"]
    }

Figure = 
    element figure {
        [usfm:order="-2" usfm:tag [id="a"]] attribute style { "fig" },
        char.closed?,
        [usfm:match[match="PIPE" matchout="'|'" dump="true"]]
        ( ([usfm:matchpair[first="/[^\\=&quot;]+/" between="'=&quot;'" second="/[^\\&quot;]*/" after="/&quot;${WSS}/"]]
                attribute * {xsd:string})+
         | [usfm:name-override="style" usfm:match[match="/[^\\=]+(?=\\)/"]] attribute * {xsd:string}?
        )?,
        [usfm:order="-1"] ([usfm:match[match="TEXTATTRIB"]] text?) # Nested character <char> markup. Can an attributed char have sub char markup? ATM no.
        >> usfm:endtag[usfm:order="4"]
    }

CharEmbedWithAttrib =
    element char {
        [usfm:order="-2" usfm:tag [before="'\+'" id="a"]] attribute style { CharWithAttrib.enum },
        char.closed?,
        [usfm:order="3" usfm:match[match="PIPE" matchout="'|'" dump="true"]]
        ( ([usfm:matchpair[first="/[^\\\n=&quot;]+/" between="'=&quot;'" second="/[^\\\n&quot;]*/" after="/&quot;${WSS}/"]]
                attribute * {xsd:string})+
         | [usfm:name-override="style" usfm:match[match="/[^\\\n=]+(?=\\)/"]] attribute * {xsd:string}
        )?,
        [usfm:order="-1"] ((CharEmbed | [usfm:match[match="TEXTATTRIB"]] text)*)
        >> usfm:endtag[usfm:order="4" before="'\+'"]
    }

CharWithAttrib.enum = (
      [usfm:propval="lemma"] "w"
    | [usfm:propval="gloss"] "rb"
)
        
char.link =
    [usfm:match[match="PIPE" matchout="'|'" dump="true"] usfm:properties[interleave_between="WS"]]
    ([usfm:match[before="'link-href=&quot;'" after="'&quot;'"]]attribute link-href { xsd:string
        { pattern = "(.*///?(.*/?)+)|((prj:[A-Za-z\-0-9]{3,8} )?[A-Z1-4]{3} \d+:\d+(\-\d+)?)|(#[^\s]+)" } }? # The resource being linked to as a URI
    & [usfm:match[before="'link-title=&quot;'" after="'&quot;'"]]
    attribute link-title { xsd:string }? # Plain text describing the remote resource such as might be shown in a tooltip
    & [usfm:match[before="'link-id=&quot;'" after="'&quot;'"]]
    attribute link-id { xsd:string { pattern = "[\p{L}\d_\-\.:]+" } }?) # Unique identifier for this location in the text

char.closed =
    attribute closed { xsd:boolean } # Present to allow roundtripping to USFM, not needed for publishing

Milestone = (
    (element ms {
        # [usfm:tag[after="/\s?(?=[\\|])/"]] attribute style { xsd:string {pattern="[a-z][a-z0-9-]*" }},
        [usfm:tag[after="/${ws}?(?=[\\|])/" afterout=""]] attribute style { Milestone.enum },
        attribute sid { xsd:string { pattern="[\p{L}\d_\-\.:]+" } }?, # optional milestone start id (digits, letters, underscore)
        attribute eid { xsd:string { pattern="[\p{L}\d_\-\.:]+" } }?, # milestone end id (digits, letters, underscore) - required with sid
        [usfm:match[match="PIPE" matchout="'|'" dump="true"]]
        ( ([usfm:matchpair[first="/[^\\\n=&quot;]+/" between="'=&quot;'" second="/[^\\\n&quot;]*/" after="/&quot;${WSS}/"]]
                attribute * {xsd:string})+
         | [usfm:name-override="style" usfm:match[match="/[^\\\n=]+(?=\\)/"]] attribute * {xsd:string}?
        )?,
        empty
    }
    >> usfm:endtag[matchref=""])
    )

Milestone.enum = (
      [usfm:propval="who"] "ts-s"
    | "ts-e"
    | "t-s"
    | "t-e"
    | "ts"
    | "qt1-s"
    | "qt1-e"
    | "qt2-s"
    | "qt2-e"
    | "qt3-s"
    | "qt3-e"
    | "qt4-s"
    | "qt4-e"
    | "qt5-s"
    | "qt5-e"
    | [usfm:propval="who"] "qts"
    | "qte"
    | [usfm:propval="who"] "qt-s"
    | "qt-e"
)

Chapter = ( ChapterStart | [usfm:ignore = "true"]ChapterEnd )

ChapterStart =
    [usfm:stacked="true"]
    element chapter { # Start of new chapter
        [usfm:tag[usfm:seq="true" after="TAGPARMEND"]]
        attribute style { "c" },
        [usfm:match[after="/${WS}+|(?=\\)/" afterout="' '" usfm:seq="true"]]
        attribute number { xsd:integer },
        attribute sid { xsd:string { minLength = "1" pattern = "[A-Z1-4]{3} ?[0-9]+" } },
        [usfm:match [before="'\ca '" after="'\ca*'"]]
        attribute altnumber { xsd:string { minLength = "1" pattern = "[0-9]+\p{L}?(\u200F?[\-,][0-9]+\p{L}?)*" } }?,
        [usfm:match [before="'\cp '" after="'\cp*'"]]
        attribute pubnumber { xsd:string { minLength = "1" } }?,
        empty
    }
    # E.g. <chapter number="1" style="c" altnumber="2" pubnumber="A" />
    # This schema will not support a chapter:verse string within altnumber

ChapterEnd =
    element chapter { # End of chapter
        attribute eid { xsd:string { minLength = "1" pattern = "[A-Z1-4]{3} ?[0-9]+" } },
        empty
    }
    
BookChapterLabel =
    element para { 
        [usfm:tag[]]
        attribute style { "cl" }, # Chapter label for book, specified once prior to chapter 1
        [usfm:match[match="/[^\\]+(?=${NL})/" after="NL" afterout="'\n'"]]
        text
    }

Verse = ( VerseStart | [usfm:ignore="true"]VerseEnd )

VerseStart =
    [usfm:stacked = "true"]
    element verse {
        [usfm:tag[usfm:seq="true"]]
        attribute style { "v" },
        [usfm:match[usfm:seq="true" after="/${WS}|(?=\\)/" afterout="' '"]]
        attribute number { xsd:string { minLength = "1" pattern = "[0-9]+[\p{L}\p{Mn}]*(\u200F?[\-,][0-9]+[\p{L}\p{Mn}]*)*" } },
        [usfm:tag[dump="true" "va"] usfm:text[] usfm:endtag[after="/\*${WSS}/" afterout="'\* '" "va"]]
        attribute altnumber { xsd:string { minLength = "1" pattern = "[0-9]+[\p{L}\p{Mn}]*(\u200F?[\-,:][0-9]+[\p{L}\p{Mn}]*)*" } }?,
        [usfm:tag[dump="true" "vp"] usfm:text[] usfm:endtag[after="/\*${WSS}/" afterout="'\* '" "vp"]]
        attribute pubnumber { xsd:string { minLength = "1" } }?,
        [usfm:ignore="true"]
        attribute sid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9,\-:\p{L}\p{Mn}]*" } },
        empty
    }
    # E.g. <verse number="1" style="v" altnumber="2" pubnumber="B" sid="GEN 1:22" />
    # This attribute order disagrees with USFM order

VerseEnd =
    element verse {
        attribute eid { xsd:string { pattern = "[A-Z1-4]{3} ?[a-z0-9,\-:\p{L}\p{Mn}]*" } },
        empty
    }

Footnote =
    element note {
        [usfm:tag[id="a"]]
        attribute style { "f" | "fe" | "ef" },
        [usfm:match[match="/[^\\\s]+/" after="/${WSS}/" afterout="' '"]]
        attribute caller { text },
        category?,
        FootnoteChar, 
        (FootnoteChar | [usfm:text[]] text)*
        >> usfm:endtag[]
    }

FootnoteChar =
    element char {
        [usfm:grouping="8" usfm:tag[id="a"]]
        attribute style { FootnoteChar.char.style.enum },
        [usfm:ignore="true"]
        char.link?,
        [usfm:ignore="true"]
        char.closed?,
        ([usfm:ignore="true"] Reference | NoteCharEmbed | [usfm:text[]] text)*
        >> usfm:endtag[usfm:many="?"]
    }
FootnoteChar.char.style.enum = (
      "fr" # The origin reference for the footnote
    | "ft" # Footnote text, Protocanon
    | "fk" # A footnote keyword
    | "fqa" # A footnote alternate rendering for a portion of scripture text
    | "fq" # A footnote scripture quote or alternate rendering
    | "fl" # A footnote label text item, for marking or "labelling" the type or alternate translation being provided in the note.
    | "fw" # A footnote witness list, for distinguishing a list of sigla representing witnesses in critical editions.
    | "fp" # A Footnote additional paragraph marker
    | "fv" # A verse number within the footnote text
    | "fdc" # Footnote text, applies to Deuterocanon only (DEPRECATED - use char@style dc)
    | "xt" # A cross reference target reference(s)
    | "it" # A character style, use italic text
    | "bdit" # A character style, use bold + italic text
    | "bd" # A character style, use bold text
    | "em" # A character style, use emphasized text style
    | "sc" # A character style, for small capitalization text; abbreviations
    )

CrossReference =
    element note {
        [usfm:tag[id="a"]]
        attribute style { "x" | "ex" },
        [usfm:match[match="/[^\\\s]+/" after="/${WSS}/" afterout="' '"]]
        attribute caller { text },
        CrossReferenceChar*
        >> usfm:endtag[]
    }

CrossReferenceChar =
    element char {
        [usfm:tag[id="a"]]
        attribute style { CrossReferenceChar.char.style.enum },
        [usfm:ignore="true"]
        char.link?,
        [usfm:ignore="true"]
        char.closed?,
        ([usfm:ignore="true"] Reference | NoteCharEmbed | [usfm:text[]] text)+
        >> usfm:endtag[usfm:many="?"]
    }
CrossReferenceChar.char.style.enum = (
      "xop" # Published cross reference origin text (origin reference that should appear in the published text)
    | "xo" # The cross reference origin reference
    | "xta" # Cross reference target references added text
    | "xt" # The cross reference target reference(s), protocanon only
    | "xk" # A cross reference keyword
    | "xq" # A cross-reference quotation from the scripture text
    | "xot" # Cross-reference target reference(s), Old Testament only
    | "xnt" # Cross-reference target reference(s), New Testament only
    | "xdc" # Cross-reference target reference(s), Deuterocanon only (DEPRECATED - use char@style dc)
    )

Sidebar =
    element sidebar {
        [usfm:tag[]]
        attribute style { "esb" },
        category?,
        (Section | Para | List | Table | Footnote | CrossReference)+
        >> usfm:tag[dump="true" afterout="'\n'" "esbe"]
    }

category =
    [usfm:tag["cat"] usfm:text[] usfm:endtag["cat"]]
    attribute category { text }

Reference =
    element ref {
        attribute loc { xsd:string { pattern = "[A-Z1-4]{3}(-[A-Z1-4]{3})? ?[a-z0-9\-:]*" } },
        text?
    }

Break = 
    [usfm:match[match="'//'"]]
    element optbreak { empty }
