usfmBible{

			/* The usfm files with only the scripture part is considered at present.
			The peripherals are not accomodated */

			File = scripture 


			/* Naming the common elements used across elements*/

			backSlash = "\\"
			newLine = ("\r" | "\n")+
			spaceChar = " "
			spaceOrNewLine = " " | newLine
			char = ~(backSlash) ~(newLine) ~spaceChar ~("|") any
			number = digit+

			/* Allowing text element to take an optional newLine makes it valid to 
			have line breaks within verse texts, introduction paragraphs etc. In 
			the JSON the text in each line becomes a separate text object. But in 
			the "text" field of the verse, it will all be combined together without 
			line beaks in between.*/ 

			text =  newLine? word+

			/* For word, the optional spaceChar at the rear handles trailing spaces 
			at line ends*/ 

			word = spaceChar? char+ spaceChar?


			/* The book codes are defined only in UPPER case in the grammar. 
			the Javascript code is expected to change the case, if it is provided 
			in lower and generate a warning if so*/

			bookCode = "GEN" | "EXO" | "LEV" | "NUM" | "DEU" | "JOS" | "JDG" | "RUT" | "1SA" | "2SA" | "1KI" | "2KI" | 
							"1CH" | "2CH" | "EZR" | "NEH" | "EST" | "JOB" | "PSA" | "PRO" | 
							"ECC" | "SNG" | "ISA" | "JER" | "LAM" | "EZK" | "DAN" | 
							"HOS" | "JOL" | "AMO" | "OBA" | "JON" | "MIC" | "NAM" | "HAB" | 
							"ZEP" | "HAG" | "ZEC" | "MAL" | "MAT" | "MRK" | "LUK" | 
							"JHN" | "ACT" | "ROM" | "1CO" | "2CO" | "GAL" | "EPH" | "PHP" | 
							"COL" | "1TH" | "2TH" | "1TI" | "2TI" | "TIT" | "PHM" | 
							"HEB" | "JAS" | "1PE" | "2PE" | "1JN" | "2JN" | "3JN" | "JUD" | 
							"REV" | "TOB" | "JDT" | "ESG" | "WIS" | "SIR" | "BAR" | 
							"LJE" | "S3Y" | "SUS" | "BEL" | "1MA" | "2MA" | "3MA" | "4MA" | 
							"1ES" | "2ES" | "MAN" | "PS2" | "ODA" | "PSS" | "EZA" | 
							"5EZ" | "6EZ" | "DAG" | "PS3" | "2BA" | "LBA" | "JUB" | "ENO" | 
							"1MQ" | "2MQ" | "3MQ" | "REP" | "4BA" | "LAO" | "FRT" | 
							"BAK" | "OTH" | "INT" | "CNC" | "GLO" | "TDX" | "NDX"


			/* The metadata which forms the part before chapter start is futher divided into 3: 
			bookIdentification,	bookHeaders & 	introduction
			with different set of elements valid in each section, bringing in a concept of valid 
			order of markers, in the head section. The rules of which marker comes in which 
			section was formulated refering the USX documentation. rem and esb are included 
			in two sections. They are also included in the metascripture element which captures 
			these kind of markers coming within the chapters */

			/* The basic structure of the content is this; The content is a list of chapters 
			and each chapter is a list of verseElements. Other elements are all fit into this 
			structure as headers, meta data etc.*/

			scripture = metaData content
			content = chapter+
			metaData = bookIdentification bookHeaders* introduction* 	bookChapterLabel?

			bookIdentification = idElement 

			bookHeaders = hElement | ideElement | remElement | tocElement | tocaElement | stsElement | mt | mte | esbElement | usfmElement

			introduction = ibElement | ieElement | iexElement | ili 
							| imElement | imiElement | imqElement | imt | imte | io 
							| iotElement | ipiElement | ipqElement | iprElement | ipElement | iqElement | isElement | remElement | esbElement
			

			/* the cl marker is valid below the c marker as well as just above it. 
			So it is included in chapterHeaders as well as in metaData which has 
			all the headers coming before the chapter begining*/

			bookChapterLabel = clElement

			chapterHeader = cElement (caElement | cpElement | clElement | cdElement)*
			chapter = chapterHeader mandatoryParaMetaScripture  verseElement+

			
			/*The metaScripture element is used to accomodate all the extra stuff 
			coming into the basic book-chapter-verse structure of the scripture. 
			The mandatoryParaMetaScripture in chapter, is added to ensure that 
			at least one p, or similar paragraph element, comes at the chapter start. 
			The rules nonParaMetaScripture and mandatoryParaMetaScripture are 
			brought in to enable this validation*/ 


			metaScripture = sectionHeader | mte | remElement | iexElement | ipElement | spElement | litElement | qaElement | notesElement | figureElement  | milestoneElement | zNameSpace | esbElement | li | paraElement

			nonParaMetaScripture = sectionHeader | mte | remElement | iexElement | ipElement | spElement | litElement | qaElement | notesElement | figureElement  | milestoneElement | zNameSpace | esbElement | li

			mandatoryParaMetaScripture = nonParaMetaScripture* paraElement metaScripture*

			/* normally section header would contain s marker or ms marker. 
			It might also have sr, r or mr after it. All that together forms 
			the section header. It is seen in some usfm files that s is used 
			without text title, like sd. So to accomodate that and the sd marker 
			a sectionElementWithoutTitle rule is added */

			sectionHeader  = sectionElement sectionPostHeader* ipElement*
			sectionPostHeader = srElement | rElement | mrElement

			sectionElement = sectionElementWithTitle | sectionElementWithoutTitle | msElement | dElement

			sectionElementWithTitle = sectionMarker spaceChar (chapterContentTextContent | notesElement | milestoneElement)+ 
			sectionElementWithoutTitle = (sdMarker | sectionMarker ) spaceChar*
			sectionMarker = newLine? backSlash "s" number? &(spaceChar|newLine)
			sdMarker = newLine? backSlash "sd" number? &(spaceChar|newLine)

			/* Not only the p marker is considered as a paragraph marker here. 
			A set of markers mainly used for styling and showing intentation 
			are catogorized as paragraph markers. They are considered as standing 
			independent without attaching them with the text following it, from a 
			grammar perspective. It is done like that, because as per the 
			book-chapter-verse structure the text coming within a paragraph or quote 
			will actually be part of a verse, introduction etc. So for the sake of 
			implementing the grammar, it is considered separately from the text. 
			The JSON structure created using the semantic operation on this grammar 
			ensures that, the paragraph markers are represented such a way that no information 
			lose or structural difference would be caused while re-creating the usfm from the 
			JSON structure. But the paragraph-wise division will not be there in the JSON. */

			paraElement = newLine? backSlash paraMarker spaceChar*
			paraMarker = paraMarkerSet1 | paraMarkerSet2 |paraMarkerSet3 | paraMarkerSet4
			paraMarkerSet1 =( "cls" | "pmo" | "pmc" | "pmr" | "pmi" ) 
			paraMarkerSet2 =( ("pi" number?) | ("ph" number?) | ("qm" number?) )
			paraMarkerSet3 = ( "pm" | "pr" | "nb" | "pc" | "po" | "pb" | "qr" | "qc" | "qd" | "m"  | "b" | "p" )
			paraMarkerSet4 = ("q" number?) 

			/* A verse is considered as a collection of objects which could be verse 
			text objects or other meta-scripture objects */

			verseElement = newLine? backSlash "v" spaceChar verseNumber (vaElement | vpElement)*  (verseText | metaScripture)*
			
			/* verse number can be numbers, numbers followed by a letter(a, b, c etc) to show split verses, 
			and also two such values separated by a hypen, showing a merged verse. 
			It is valid to start the verse text on the next line after the verse number. */

			verseNumber = number letter? ("-" number letter?)? spaceOrNewLine

			/* the verseText include all the text snippets aswell as the in-line contents 
			coming within verse text like character markers, tables and lists*/
			verseText = chapterContentTextContent
			



			qaElement = newLine? backSlash "qa" spaceChar text

			cElement = newLine? backSlash "c" spaceChar number spaceChar*
			caElement = newLine? backSlash "ca" spaceChar number backSlash "ca*"
			cdElement = newLine? backSlash "cd" spaceChar ((chapterContentTextContent | notesElement | milestoneElement)+ | notesElement)+
			clElement = newLine? backSlash "cl"  spaceChar text
			cpElement = newLine? backSlash "cp"  spaceChar text
			dElement = newLine? backSlash "d"  spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			
			hElement = newLine? backSlash "h" number? spaceChar text
			remElement = newLine? backSlash "rem" spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			stsElement = newLine? backSlash "sts" spaceChar text

			spElement = newLine? backSlash "sp" spaceChar (chapterContentTextContent | notesElement | milestoneElement)+

			ibElement = newLine? backSlash "ib" spaceChar? 
			idElement = backSlash "id"  spaceChar bookCode  (spaceChar text)?
			ideElement = newLine? backSlash "ide"  spaceChar text
			ieElement = newLine? backSlash "ie"
			iexElement = newLine? backSlash "iex"  spaceChar text
			
			imElement = newLine? backSlash "im" spaceChar bookIntroductionTitlesTextContent
			imiElement = newLine? backSlash "imi" spaceChar bookIntroductionTitlesTextContent
			imqElement = newLine? backSlash "imq" spaceChar bookIntroductionTitlesTextContent
			ili = iliElement+
			iliElement = newLine? backSlash "ili" number? spaceChar bookIntroductionTitlesTextContent
			imt = imtElement+
			imtElement = newLine? backSlash "imt" number? spaceChar bookIntroductionTitlesTextContent
			imte = imteElement+
			imteElement = newLine? backSlash "imte" number? spaceChar bookIntroductionTitlesTextContent
			io = ioElement+
			ioElement = newLine? backSlash "io" number? spaceChar bookIntroductionTitlesTextContent
			iotElement = newLine? backSlash "iot" spaceChar bookIntroductionTitlesTextContent
			ipElement = newLine? backSlash "ip" spaceChar bookIntroductionTitlesTextContent
			ipiElement = newLine? backSlash "ipi" spaceChar bookIntroductionTitlesTextContent
			ipqElement = newLine? backSlash "ipq" spaceChar bookIntroductionTitlesTextContent
			iprElement = newLine? backSlash "ipr" spaceChar bookIntroductionTitlesTextContent
			iq = iqElement+
			iqElement = newLine? backSlash "iq" number? spaceChar bookIntroductionTitlesTextContent
			isElement = newLine? backSlash "is" number? spaceChar bookIntroductionTitlesTextContent
			
			mrElement = newLine? backSlash "mr" spaceChar text
			msElement = newLine? backSlash "ms" number? spaceChar text
			mt = mtElement+
			mtElement = newLine? backSlash "mt" number? spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			mte = mteElement+
			mteElement = newLine? backSlash "mte" number? spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			rElement = newLine? backSlash "r" spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			
			srElement = newLine? backSlash "sr" spaceChar (chapterContentTextContent | notesElement | milestoneElement)+
			tocElement = newLine? backSlash ("toc1" | "toc2" | "toc3") (spaceChar text)?
			tocaElement = newLine? backSlash ("toca1" | "toca2" | "toca3") (spaceChar text)?
			usfmElement = newLine? backSlash "usfm" spaceChar version
			version = number ("." number)?
			vaElement = backSlash "va" spaceChar number backSlash "va*" spaceChar?
			vpElement = backSlash "vp" spaceChar text backSlash "vp*" spaceChar?


			/* the footnotes and cross-refs are implemented as having a plain structure. 
			That is, though the nesting of markers and content markers are all supported 
			their heirarchical structure is not implemented in the grammar. The Grammar see 
			each marker coming within the notes as a sperate item along with the text 
			snippets coming there. But it does validates if a marker is valid there. */

			/* the optional spaceChar after the closing markers makes it valid to 
			have those markers valid with or without a space after it. If there is a space, 
			it would be considered as part of the closing marker and will not be 
			considered along with the text following it. */

			notesElement = footnoteElement | crossrefElement | separateXtElement
			footnoteElement = fElement | feElement | efElement
			fElement = newLine? backSlash  "f" spaceChar? caller? spaceChar* footnoteContent* backSlash "f*" spaceChar?
			feElement = newLine? backSlash  "fe"  spaceChar? caller? spaceChar* footnoteContent*  backSlash "fe*" spaceChar?
			efElement = newLine? backSlash "ef" spaceChar? caller? spaceChar* (footnoteContent | separateXtElement | charElement)* backSlash "ef*" spaceChar?


			caller = "+" | "-" | "?"

			footnoteContent = text | frElement | fqElement | fqaElement | fkElement | flElement | fwElement
									| fpElement | fvElement | ftElement | fdcElement | fmElement | nestedCharElement
			frElement = newLine? backSlash "fr" spaceChar text* (backSlash "fr" "*" spaceChar?)?
			fqElement = newLine? backSlash "fq" spaceChar text* (backSlash "fq" "*" spaceChar?)?
			fqaElement = newLine? backSlash "fqa" spaceChar text* (backSlash "fqa" "*" spaceChar?)?
			fkElement = newLine? backSlash "fk" spaceChar text* (backSlash "fk" "*" spaceChar?)?
			flElement = newLine? backSlash "fl" spaceChar text* (backSlash "fl" "*" spaceChar?)?
			fwElement = newLine? backSlash "fw" spaceChar text* (backSlash "fw" "*" spaceChar?)?
			fpElement = newLine? backSlash "fp" spaceChar text* (backSlash "fp" "*" spaceChar?)?
			fvElement = newLine? backSlash "fv" spaceChar text* (backSlash "fv" "*" spaceChar?)?
			ftElement = newLine? backSlash "ft" spaceChar text* (backSlash "ft" "*" spaceChar?)?
			fdcElement = newLine? backSlash "fdc" spaceChar text* (backSlash "fdc" "*" spaceChar?)?
			fmElement = newLine? backSlash "fm" spaceChar text* (backSlash "fm" "*" spaceChar?)?

			crossrefElement = newLine? backSlash  ("x"|"ex") spaceChar? caller? spaceChar? crossrefContent* backSlash ("x*"|"ex*") spaceChar?


			crossrefContent  = text | xoElement | xkElement | xqElement | xtElement | xtaElement | xopElement | xotElement | xntElement | xdcElement | rqElement | nestedCharElement
            separateXtElement = newLine? backSlash "xt" spaceChar text* attributesInCrossref? backSlash ("xt*" | "x*") spaceChar?

            nestedSeparateXtElement = newLine? backSlash "+" "xt" spaceChar text* attributesInCrossref? backSlash "+" ("xt*" | "x*") spaceChar?

			attributesInCrossref = "|" spaceChar? (linkAttribute | customAttribute| defaultAttribute)+
			xoElement = newLine? backSlash "xo" spaceChar text* (backSlash "xo*" spaceChar?)?
			xkElement = newLine? backSlash "xk" spaceChar text* (backSlash "xk*" spaceChar?)?
			xqElement = newLine? backSlash "xq" spaceChar text* (backSlash "xq*" spaceChar?)?
			xtElement = newLine? backSlash "xt" spaceChar text* attributesInCrossref? (backSlash "xt*" spaceChar?)?
			xtaElement = newLine? backSlash "xta" spaceChar text* (backSlash "xta*" spaceChar?)?
			xopElement = newLine? backSlash "xop" spaceChar text* (backSlash "xop*" spaceChar?)?			xotElement = newLine? backSlash "xot" spaceChar text* (backSlash "xot*" spaceChar?)?
			xntElement = newLine? backSlash "xnt" spaceChar text* (backSlash "xnt*" spaceChar?)?
			xdcElement = newLine? backSlash "xdc" spaceChar text* (backSlash "xdc*" spaceChar?)?
			rqElement = newLine? backSlash "rq" spaceChar text* (backSlash "rq*" spaceChar?)?

			nestedCharElement = nestedInLineCharElement | nestedInLineCharAttributeElement | nestedInLineCharNumberedElement | nestedSeparateXtElement
			nestedInLineCharElement = newLine? backSlash "+add" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+add" "*")? spaceChar?
						| newLine? backSlash "+bk" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+bk" "*")? spaceChar?
						| newLine? backSlash "+dc" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+dc" "*")? spaceChar?
						| newLine? backSlash "+k" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+k" "*")? spaceChar?
						| newLine? backSlash "+nd" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+nd" "*")? spaceChar?
						| newLine? backSlash "+ord" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+ord" "*")? spaceChar?
						| newLine? backSlash "+pn" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+pn"  "*")? spaceChar?
						| newLine? backSlash "+png" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+png"  "*")? spaceChar?
						| newLine? backSlash "+addpn" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+addpn"  "*")? spaceChar?
						| newLine? backSlash "+qt" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+qt"  "*")? spaceChar?
						| newLine? backSlash "+sig" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+sig"  "*")? spaceChar?
						| newLine? backSlash "+sls" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+sls"  "*")? spaceChar?
						| newLine? backSlash "+tl" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+tl"  "*")? spaceChar?
						| newLine? backSlash "+wj" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+wj"  "*")? spaceChar?
						| newLine? backSlash "+em" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+em"  "*")? spaceChar?
						| newLine? backSlash "+bd" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+bd"  "*")? spaceChar?
						| newLine? backSlash "+it" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+it"  "*")? spaceChar?
						| newLine? backSlash "+bdit" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+bdit"  "*")? spaceChar?
						| newLine? backSlash "+no" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+no"  "*")? spaceChar?
						| newLine? backSlash "+sc" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+sc"  "*")? spaceChar?
						| newLine? backSlash "+sup" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+sup"  "*")? spaceChar?
						| newLine? backSlash "+ndx" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+ndx"  "*")? spaceChar?
						| newLine? backSlash "+wg" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+wg"  "*")? spaceChar?
						| newLine? backSlash "+wh" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+wh"  "*")? spaceChar?
						| newLine? backSlash "+wa" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+wa"  "*")? spaceChar?
						| newLine? backSlash "+qs" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+qs"  "*")? spaceChar?
						| newLine? backSlash "+qac" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+qac"  "*")? spaceChar?
						| newLine? backSlash "+litl" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+litl"  "*")? spaceChar?
						| newLine? backSlash "+lik" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+lik"  "*")? spaceChar?
						| newLine? backSlash "+rq" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+rq"  "*")? spaceChar?
						| newLine? backSlash "+ior" spaceChar bookIntroductionTitlesTextContent ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+ior" "*")? spaceChar?
						| newLine? backSlash "+cat" spaceChar bookIntroductionTitlesTextContent ("|" spaceChar? (customAttribute | linkAttribute)+)? (backSlash "+cat" "*")? spaceChar?

			charElement = inLineCharElement | inLineCharAttributeElement | inLineCharNumberedElement | separateXtElement
			inLineCharElement = newLine? backSlash "add" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "add" "*" spaceChar?
						| newLine? backSlash "bk" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "bk" "*" spaceChar?
						| newLine? backSlash "dc" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "dc" "*" spaceChar?
						| newLine? backSlash "k" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "k" "*" spaceChar?
						| newLine? backSlash "nd" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "nd" "*" spaceChar?
						| newLine? backSlash "ord" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "ord" "*" spaceChar?
						| newLine? backSlash "pn" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "pn"  "*" spaceChar?
						| newLine? backSlash "png" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "png"  "*" spaceChar?
						| newLine? backSlash "addpn" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "addpn"  "*" spaceChar?
						| newLine? backSlash "qt" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "qt"  "*" spaceChar?
						| newLine? backSlash "sig" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "sig"  "*" spaceChar?
						| newLine? backSlash "sls" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "sls"  "*" spaceChar?
						| newLine? backSlash "tl" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "tl"  "*" spaceChar?
						| newLine? backSlash "wj" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "wj"  "*" spaceChar?
						| newLine? backSlash "em" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "em"  "*" spaceChar?
						| newLine? backSlash "bd" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "bd"  "*" spaceChar?
						| newLine? backSlash "it" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "it"  "*" spaceChar?
						| newLine? backSlash "bdit" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "bdit"  "*" spaceChar?
						| newLine? backSlash "no" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "no"  "*" spaceChar?
						| newLine? backSlash "sc" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "sc"  "*" spaceChar?
						| newLine? backSlash "sup" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "sup"  "*" spaceChar?
						| newLine? backSlash "ndx" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "ndx"  "*" spaceChar?
						| newLine? backSlash "wg" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "wg"  "*" spaceChar?
						| newLine? backSlash "wh" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "wh"  "*" spaceChar?
						| newLine? backSlash "wa" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "wa"  "*" spaceChar?
						| newLine? backSlash "qs" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "qs"  "*" spaceChar?
						| newLine? backSlash "qac" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "qac"  "*" spaceChar?
						| newLine? backSlash "litl" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "litl"  "*" spaceChar?
						| newLine? backSlash "lik" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "lik"  "*" spaceChar?
						| newLine? backSlash "rq" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "rq"  "*" spaceChar?
						| newLine? backSlash "ior" spaceChar (text)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "ior" "*" spaceChar?
						| newLine? backSlash "cat" spaceChar (text | notesElement |  nestedCharElement | milestoneElement | figureElement | zNameSpace)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "cat" "*" spaceChar?
			
						
	  
			inLineCharAttributeElement = newLine? backSlash "rb" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (rbAttribute+ | defaultAttribute))? backSlash "rb"  "*" spaceChar?
						| newLine? backSlash "w" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (wAttribute+ | defaultAttribute))? backSlash "w"  "*" spaceChar?
						| newLine? backSlash "jmp" spaceChar (text | nestedCharElement | notesElement)* ("|" spaceChar? (linkAttribute+ | defaultAttribute))? backSlash "jmp"  "*" spaceChar?
			nestedInLineCharAttributeElement = newLine? backSlash "+rb" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (rbAttribute+ | defaultAttribute))? (backSlash "+rb"  "*")? spaceChar?
						| newLine? backSlash "+w" spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (wAttribute+ | defaultAttribute))? (backSlash "+w"  "*")? spaceChar?
						| newLine? backSlash "+jmp" spaceChar (text | nestedCharElement | notesElement)* ("|" spaceChar? ((linkAttribute | customAttribute)+ | defaultAttribute))? (backSlash "+jmp"  "*")? spaceChar?


			inLineCharNumberedElement = newLine? backSlash "liv" number? spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "liv" number?  "*" spaceChar?
			nestedInLineCharNumberedElement = newLine? backSlash "+liv" number? spaceChar (text | nestedCharElement | notesElement)+ ("|" spaceChar? (customAttribute | linkAttribute)+)? backSlash "+liv" number? "*" spaceChar?

			/* For user defined attributes starting with x */

			customAttribute = customAttributeName "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			customAttributeName = "x-" (letter |digit |"_")+
			attributeValue =  (~"\"" any)+ 

			/* The default attribute is valid for any marker which normally provide attributes. 
			It would be extracted as default attribute without mentioning the corresponding attribute name */

			defaultAttribute = (~(backSlash) ~(newLine) ~("|") ~("=") any)+

			/* the special set of attributes valid for each of the normally 
			attributed elements are defined here*/

			wAttribute = lemmaAttribute | strongAttribute | scrlocAttribute | linkAttribute | customAttribute
			rbAttribute = glossAttribute | customAttribute | linkAttribute
			figAttribute = altAttribute | srcAttribute | sizeAttribute | locAttribute | copyAttribute | refAttribute | customAttribute | linkAttribute
			lemmaAttribute = "lemma" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			strongAttribute = "strong" "=" "\"" attributeValue? "\"" (spaceChar | newLine)* 
			scrlocAttribute = "srcloc" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			glossAttribute = "gloss" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			linkAttribute = linkAttributeName "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			linkAttributeName = "link-href" | "link-title" | "link-id" | linkAttributeUserDefinedName
			linkAttributeUserDefinedName = "link-" (letter | digit | "_")+
			altAttribute = "alt" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			srcAttribute = "src" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			sizeAttribute = "size" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			locAttribute = "loc" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			copyAttribute = "copy" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			refAttribute = "ref" "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			milestoneAttribute = msAttribute | customAttribute | linkAttribute
			msAttribute = milestoneAttributeNames "=" "\"" attributeValue? "\"" (spaceChar | newLine)*
			milestoneAttributeNames = "sid" | "eid" | "who"

			/* as the caption and attributes are all optional, it allows the fig marker to be empty also*/

			figureElement = backSlash "fig" spaceChar caption?  ("|" spaceChar? figAttribute+)? backSlash "fig*"
			caption = text

			/* the table structure with list of rows and each row with list of values is 
			implemented as such in the JSON using javascript semantic opearations*/

			table = headerRow? row+
			headerRow = trElement headerCell+
			headerCell = thElement | thrElement
			row = trElement cell+
			cell = tcElement | tcrElement

			trElement = newLine? backSlash "tr" spaceChar
			thElement = backSlash "th" number spaceChar text
			thrElement = backSlash "thr" number spaceChar text
			tcElement = backSlash "tc" number spaceChar text
			tcrElement = backSlash "tcr" number spaceChar text

			/* like the table, the heirarchical structure of the list is also implemented in the JSON */

			li =  (limElement | lhElement | liElement | lfElement)+ 
			liElement = liElementWithText | liElementWithoutText
			liElementWithText = newLine? backSlash "li" number? spaceChar (text | charElement)+
			liElementWithoutText = newLine? backSlash "li" spaceChar*
			lhElement = lhElementWithText | lhElementWithoutText
			lhElementWithText = newLine? backSlash "lh" spaceChar (text | charElement)*
			lhElementWithoutText = newLine? backSlash "lh" spaceChar*
			lfElement = lfElementWithText | lfElementWithoutText
			lfElementWithText = newLine? backSlash "lf" spaceChar (text | charElement)*
			lfElementWithoutText = newLine? backSlash "lf" spaceChar*
			limElement = limElementWithText | limElementWithoutText
			limElementWithText = newLine? backSlash "lim" number? spaceChar (text | charElement)*
			limElementWithoutText = newLine? backSlash "lim" number? spaceChar*
			

			
			litElement = newLine? backSlash "lit" spaceChar ((chapterContentTextContent | notesElement | milestoneElement) | notesElement | milestoneElement)+


			/* The text content vaild in different sections is determined by all the valid 
			inline markers allowed there. This is determined by refering the USX documentation*/

			bookIntroductionTitlesTextContent = (text | notesElement |  charElement | milestoneElement | figureElement | zNameSpace)+
			bookTitlesTextContent = (text | notesElement | charElement | zNameSpace)+
			chapterContentTextContent = text | charElement | table | li 
			bookIntroductionEndTitlesTextContent = (text | notesElement | charElement | milestoneElement | zNameSpace | esbElement)+

			/* since milestones can be used defined, their name is defined as any set of 
			letters of digits. So when ever the parser encounters an unknown marker, 
			its last fall back is to see if it is a milestone.*/

			milestoneElement = milestonePairElement | milestoneStandaloneElement
			milestoneStandaloneElement = newLine? backSlash milestoneName milestoneClosing
			milestonePairElement = (newLine? backSlash milestoneName "-s" spaceChar* ("|" spaceChar? (milestoneAttribute+ | defaultAttribute))? milestoneClosing?) 
								| (newLine? backSlash milestoneName "-e" spaceChar* ("|" spaceChar? (milestoneAttribute+ | defaultAttribute))? milestoneClosing?)
			milestoneName = (letter | digit | "_")+
			milestoneClosing = (backSlash "*") 

			zNameSpace = newLine? backSlash "z" char* spaceChar? text? (backSlash "*" )?

			esbElement = newLine? backSlash "esb" spaceChar? (chapterContentTextContent | sectionHeader | mte | remElement | iexElement | ipElement | spElement | litElement | qaElement | notesElement | figureElement  | milestoneElement | zNameSpace | paraElement )+ newLine? backSlash "esbe" spaceChar?
			
}