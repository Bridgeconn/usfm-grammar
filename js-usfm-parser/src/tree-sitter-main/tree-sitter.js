var Module = void 0 !== Module ? Module : {}, TreeSitter = function () { var initPromise, document = "object" == typeof window ? { currentScript: window.document.currentScript } : null; class Parser { constructor() { this.initialize() } initialize() { throw new Error("cannot construct a Parser before calling `init()`") } static init(moduleOptions) { return initPromise || (Module = Object.assign({}, Module, moduleOptions), initPromise = new Promise((resolveInitPromise => { var moduleOverrides = Object.assign({}, Module), arguments_ = [], thisProgram = "./this.program", quit_ = (A, I) => { throw I }, ENVIRONMENT_IS_WEB = "object" == typeof window, ENVIRONMENT_IS_WORKER = "function" == typeof importScripts, ENVIRONMENT_IS_NODE = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, scriptDirectory = "", read_, readAsync, readBinary; function locateFile(A) { return Module.locateFile ? Module.locateFile(A, scriptDirectory) : scriptDirectory + A } if (ENVIRONMENT_IS_NODE) { var fs = require("fs"), nodePath = require("path"); scriptDirectory = ENVIRONMENT_IS_WORKER ? nodePath.dirname(scriptDirectory) + "/" : __dirname + "/", read_ = (A, I) => (A = isFileURI(A) ? new URL(A) : nodePath.normalize(A), fs.readFileSync(A, I ? void 0 : "utf8")), readBinary = A => { var I = read_(A, !0); return I.buffer || (I = new Uint8Array(I)), I }, readAsync = (A, I, g, Q = !0) => { A = isFileURI(A) ? new URL(A) : nodePath.normalize(A), fs.readFile(A, Q ? void 0 : "utf8", ((A, B) => { A ? g(A) : I(Q ? B.buffer : B) })) }, !Module.thisProgram && process.argv.length > 1 && (thisProgram = process.argv[1].replace(/\\/g, "/")), arguments_ = process.argv.slice(2), "undefined" != typeof module && (module.exports = Module), quit_ = (A, I) => { throw process.exitCode = A, I } } else (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && (ENVIRONMENT_IS_WORKER ? scriptDirectory = self.location.href : void 0 !== document && document.currentScript && (scriptDirectory = document.currentScript.src), scriptDirectory = scriptDirectory.startsWith("blob:") ? "" : scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1), read_ = A => { var I = new XMLHttpRequest; return I.open("GET", A, !1), I.send(null), I.responseText }, ENVIRONMENT_IS_WORKER && (readBinary = A => { var I = new XMLHttpRequest; return I.open("GET", A, !1), I.responseType = "arraybuffer", I.send(null), new Uint8Array(I.response) }), readAsync = (A, I, g) => { var Q = new XMLHttpRequest; Q.open("GET", A, !0), Q.responseType = "arraybuffer", Q.onload = () => { 200 == Q.status || 0 == Q.status && Q.response ? I(Q.response) : g() }, Q.onerror = g, Q.send(null) }); var out = Module.print || console.log.bind(console), err = Module.printErr || console.error.bind(console); Object.assign(Module, moduleOverrides), moduleOverrides = null, Module.arguments && (arguments_ = Module.arguments), Module.thisProgram && (thisProgram = Module.thisProgram), Module.quit && (quit_ = Module.quit); var dynamicLibraries = Module.dynamicLibraries || [], wasmBinary, wasmMemory; function intArrayFromBase64(A) { if (void 0 !== ENVIRONMENT_IS_NODE && ENVIRONMENT_IS_NODE) { var I = Buffer.from(A, "base64"); return new Uint8Array(I.buffer, I.byteOffset, I.length) } for (var g = atob(A), Q = new Uint8Array(g.length), B = 0; B < g.length; ++B)Q[B] = g.charCodeAt(B); return Q } function tryParseAsDataURI(A) { if (isDataURI(A)) return intArrayFromBase64(A.slice(dataURIPrefix.length)) } Module.wasmBinary && (wasmBinary = Module.wasmBinary); var ABORT = !1, EXITSTATUS, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64; function updateMemoryViews() { var A = wasmMemory.buffer; Module.HEAP8 = HEAP8 = new Int8Array(A), Module.HEAP16 = HEAP16 = new Int16Array(A), Module.HEAPU8 = HEAPU8 = new Uint8Array(A), Module.HEAPU16 = HEAPU16 = new Uint16Array(A), Module.HEAP32 = HEAP32 = new Int32Array(A), Module.HEAPU32 = HEAPU32 = new Uint32Array(A), Module.HEAPF32 = HEAPF32 = new Float32Array(A), Module.HEAPF64 = HEAPF64 = new Float64Array(A) } var INITIAL_MEMORY = Module.INITIAL_MEMORY || 33554432; wasmMemory = Module.wasmMemory ? Module.wasmMemory : new WebAssembly.Memory({ initial: INITIAL_MEMORY / 65536, maximum: 32768 }), updateMemoryViews(), INITIAL_MEMORY = wasmMemory.buffer.byteLength; var __ATPRERUN__ = [], __ATINIT__ = [], __ATMAIN__ = [], __ATPOSTRUN__ = [], __RELOC_FUNCS__ = [], runtimeInitialized = !1; function preRun() { if (Module.preRun) for ("function" == typeof Module.preRun && (Module.preRun = [Module.preRun]); Module.preRun.length;)addOnPreRun(Module.preRun.shift()); callRuntimeCallbacks(__ATPRERUN__) } function initRuntime() { runtimeInitialized = !0, callRuntimeCallbacks(__RELOC_FUNCS__), callRuntimeCallbacks(__ATINIT__) } function preMain() { callRuntimeCallbacks(__ATMAIN__) } function postRun() { if (Module.postRun) for ("function" == typeof Module.postRun && (Module.postRun = [Module.postRun]); Module.postRun.length;)addOnPostRun(Module.postRun.shift()); callRuntimeCallbacks(__ATPOSTRUN__) } function addOnPreRun(A) { __ATPRERUN__.unshift(A) } function addOnInit(A) { __ATINIT__.unshift(A) } function addOnPostRun(A) { __ATPOSTRUN__.unshift(A) } var runDependencies = 0, runDependencyWatcher = null, dependenciesFulfilled = null; function getUniqueRunDependency(A) { return A } function addRunDependency(A) { runDependencies++, Module.monitorRunDependencies?.(runDependencies) } function removeRunDependency(A) { if (runDependencies--, Module.monitorRunDependencies?.(runDependencies), 0 == runDependencies && (null !== runDependencyWatcher && (clearInterval(runDependencyWatcher), runDependencyWatcher = null), dependenciesFulfilled)) { var I = dependenciesFulfilled; dependenciesFulfilled = null, I() } } function abort(A) { throw Module.onAbort?.(A), err(A = "Aborted(" + A + ")"), ABORT = !0, EXITSTATUS = 1, A += ". Build with -sASSERTIONS for more info.", new WebAssembly.RuntimeError(A) } var dataURIPrefix = "data:application/octet-stream;base64,", isDataURI = A => A.startsWith(dataURIPrefix), isFileURI = A => A.startsWith("file://"), wasmBinaryFile; function getBinarySync(A) { if (A == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary); var I = tryParseAsDataURI(A); if (I) return I; if (readBinary) return readBinary(A); throw "both async and sync fetching of the wasm failed" } function getBinaryPromise(A) { return Promise.resolve().then((() => getBinarySync(A))) } function instantiateArrayBuffer(A, I, g) { return getBinaryPromise(A).then((A => WebAssembly.instantiate(A, I))).then(g, (A => { err(`failed to asynchronously prepare wasm: ${A}`), abort(A) })) } function instantiateAsync(A, I, g, Q) { return instantiateArrayBuffer(I, g, Q) } function createWasm() { var A = { env: wasmImports, wasi_snapshot_preview1: wasmImports, "GOT.mem": new Proxy(wasmImports, GOTHandler), "GOT.func": new Proxy(wasmImports, GOTHandler) }; function I(A, I) { wasmExports = A.exports, wasmExports = relocateExports(wasmExports, 1024); var g = getDylinkMetadata(I); return g.neededDynlibs && (dynamicLibraries = g.neededDynlibs.concat(dynamicLibraries)), mergeLibSymbols(wasmExports, "main"), LDSO.init(), loadDylibs(), addOnInit(wasmExports.__wasm_call_ctors), __RELOC_FUNCS__.push(wasmExports.__wasm_apply_data_relocs), removeRunDependency("wasm-instantiate"), wasmExports } if (addRunDependency("wasm-instantiate"), Module.instantiateWasm) try { return Module.instantiateWasm(A, I) } catch (A) { return err(`Module.instantiateWasm callback failed with error: ${A}`), !1 } return instantiateAsync(wasmBinary, wasmBinaryFile, A, (function (A) { I(A.instance, A.module) })), {} } wasmBinaryFile = "data:application/octet-stream;base64,var ASM_CONSTS = {}; function ExitStatus(A) { this.name = "ExitStatus", this.message = `Program terminated with exit(${A})`, this.status = A } var GOT = {}, currentModuleWeakSymbols = new Set([]), GOTHandler = { get(A, I) { var g = GOT[I]; return g || (g = GOT[I] = new WebAssembly.Global({ value: "i32", mutable: !0 })), currentModuleWeakSymbols.has(I) || (g.required = !0), g } }, callRuntimeCallbacks = A => { for (; A.length > 0;)A.shift()(Module) }, UTF8Decoder = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, UTF8ArrayToString = (A, I, g) => { for (var Q = I + g, B = I; A[B] && !(B >= Q);)++B; if (B - I > 16 && A.buffer && UTF8Decoder) return UTF8Decoder.decode(A.subarray(I, B)); for (var E = ""; I < B;) { var o = A[I++]; if (128 & o) { var s = 63 & A[I++]; if (192 != (224 & o)) { var e = 63 & A[I++]; if ((o = 224 == (240 & o) ? (15 & o) << 12 | s << 6 | e : (7 & o) << 18 | s << 12 | e << 6 | 63 & A[I++]) < 65536) E += String.fromCharCode(o); else { var D = o - 65536; E += String.fromCharCode(55296 | D >> 10, 56320 | 1023 & D) } } else E += String.fromCharCode((31 & o) << 6 | s) } else E += String.fromCharCode(o) } return E }, getDylinkMetadata = A => { var I = 0, g = 0; function Q() { for (var g = 0, Q = 1; ;) { var B = A[I++]; if (g += (127 & B) * Q, Q *= 128, !(128 & B)) break } return g } function B() { var g = Q(); return UTF8ArrayToString(A, (I += g) - g, g) } function E(A, I) { if (A) throw new Error(I) } var o = "dylink.0"; if (A instanceof WebAssembly.Module) { var s = WebAssembly.Module.customSections(A, o); 0 === s.length && (o = "dylink", s = WebAssembly.Module.customSections(A, o)), E(0 === s.length, "need dylink section"), g = (A = new Uint8Array(s[0])).length } else { E(!(1836278016 == new Uint32Array(new Uint8Array(A.subarray(0, 24)).buffer)[0]), "need to see wasm magic number"), E(0 !== A[8], "need the dylink section to be first"), I = 9; var e = Q(); g = I + e, o = B() } var D = { neededDynlibs: [], tlsExports: new Set, weakImports: new Set }; if ("dylink" == o) { D.memorySize = Q(), D.memoryAlign = Q(), D.tableSize = Q(), D.tableAlign = Q(); for (var w = Q(), a = 0; a < w; ++a) { var t = B(); D.neededDynlibs.push(t) } } else { E("dylink.0" !== o); for (; I < g;) { var r = A[I++], F = Q(); if (1 === r) D.memorySize = Q(), D.memoryAlign = Q(), D.tableSize = Q(), D.tableAlign = Q(); else if (2 === r) for (w = Q(), a = 0; a < w; ++a)t = B(), D.neededDynlibs.push(t); else if (3 === r) for (var _ = Q(); _--;) { var N = B(); 256 & Q() && D.tlsExports.add(N) } else if (4 === r) for (_ = Q(); _--;) { B(), N = B(); 1 == (3 & Q()) && D.weakImports.add(N) } else I += F } } return D }; function getValue(A, I = "i8") { switch (I.endsWith("*") && (I = "*"), I) { case "i1": case "i8": return HEAP8[A]; case "i16": return HEAP16[A >> 1]; case "i32": return HEAP32[A >> 2]; case "i64": abort("to do getValue(i64) use WASM_BIGINT"); case "float": return HEAPF32[A >> 2]; case "double": return HEAPF64[A >> 3]; case "*": return HEAPU32[A >> 2]; default: abort(`invalid type for getValue: ${I}`) } } var newDSO = (A, I, g) => { var Q = { refcount: 1 / 0, name: A, exports: g, global: !0 }; return LDSO.loadedLibsByName[A] = Q, null != I && (LDSO.loadedLibsByHandle[I] = Q), Q }, LDSO = { loadedLibsByName: {}, loadedLibsByHandle: {}, init() { newDSO("__main__", 0, wasmImports) } }, ___heap_base = 78112, zeroMemory = (A, I) => (HEAPU8.fill(0, A, A + I), A), alignMemory = (A, I) => Math.ceil(A / I) * I, getMemory = A => { if (runtimeInitialized) return zeroMemory(_malloc(A), A); var I = ___heap_base, g = I + alignMemory(A, 16); return ___heap_base = g, GOT.__heap_base.value = g, I }, isInternalSym = A => ["__cpp_exception", "__c_longjmp", "__wasm_apply_data_relocs", "__dso_handle", "__tls_size", "__tls_align", "__set_stack_limits", "_emscripten_tls_init", "__wasm_init_tls", "__wasm_call_ctors", "__start_em_asm", "__stop_em_asm", "__start_em_js", "__stop_em_js"].includes(A) || A.startsWith("__em_js__"), uleb128Encode = (A, I) => { A < 128 ? I.push(A) : I.push(A % 128 | 128, A >> 7) }, sigToWasmTypes = A => { for (var I = { i: "i32", j: "i64", f: "f32", d: "f64", e: "externref", p: "i32" }, g = { parameters: [], results: "v" == A[0] ? [] : [I[A[0]]] }, Q = 1; Q < A.length; ++Q)g.parameters.push(I[A[Q]]); return g }, generateFuncType = (A, I) => { var g = A.slice(0, 1), Q = A.slice(1), B = { i: 127, p: 127, j: 126, f: 125, d: 124, e: 111 }; I.push(96), uleb128Encode(Q.length, I); for (var E = 0; E < Q.length; ++E)I.push(B[Q[E]]); "v" == g ? I.push(0) : I.push(1, B[g]) }, convertJsFunctionToWasm = (A, I) => { if ("function" == typeof WebAssembly.Function) return new WebAssembly.Function(sigToWasmTypes(I), A); var g = [1]; generateFuncType(I, g); var Q = [0, 97, 115, 109, 1, 0, 0, 0, 1]; uleb128Encode(g.length, Q), Q.push(...g), Q.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0); var B = new WebAssembly.Module(new Uint8Array(Q)); return new WebAssembly.Instance(B, { e: { f: A } }).exports.f }, wasmTableMirror = [], wasmTable = new WebAssembly.Table({ initial: 27, element: "anyfunc" }), getWasmTableEntry = A => { var I = wasmTableMirror[A]; return I || (A >= wasmTableMirror.length && (wasmTableMirror.length = A + 1), wasmTableMirror[A] = I = wasmTable.get(A)), I }, updateTableMap = (A, I) => { if (functionsInTableMap) for (var g = A; g < A + I; g++) { var Q = getWasmTableEntry(g); Q && functionsInTableMap.set(Q, g) } }, functionsInTableMap, getFunctionAddress = A => (functionsInTableMap || (functionsInTableMap = new WeakMap, updateTableMap(0, wasmTable.length)), functionsInTableMap.get(A) || 0), freeTableIndexes = [], getEmptyTableSlot = () => { if (freeTableIndexes.length) return freeTableIndexes.pop(); try { wasmTable.grow(1) } catch (A) { if (!(A instanceof RangeError)) throw A; throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH." } return wasmTable.length - 1 }, setWasmTableEntry = (A, I) => { wasmTable.set(A, I), wasmTableMirror[A] = wasmTable.get(A) }, addFunction = (A, I) => { var g = getFunctionAddress(A); if (g) return g; var Q = getEmptyTableSlot(); try { setWasmTableEntry(Q, A) } catch (g) { if (!(g instanceof TypeError)) throw g; var B = convertJsFunctionToWasm(A, I); setWasmTableEntry(Q, B) } return functionsInTableMap.set(A, Q), Q }, updateGOT = (A, I) => { for (var g in A) if (!isInternalSym(g)) { var Q = A[g]; g.startsWith("orig$") && (g = g.split("$")[1], I = !0), GOT[g] ||= new WebAssembly.Global({ value: "i32", mutable: !0 }), (I || 0 == GOT[g].value) && ("function" == typeof Q ? GOT[g].value = addFunction(Q) : "number" == typeof Q ? GOT[g].value = Q : err(`unhandled export type for '${g}': ${typeof Q}`)) } }, relocateExports = (A, I, g) => { var Q = {}; for (var B in A) { var E = A[B]; "object" == typeof E && (E = E.value), "number" == typeof E && (E += I), Q[B] = E } return updateGOT(Q, g), Q }, isSymbolDefined = A => { var I = wasmImports[A]; return !(!I || I.stub) }, dynCallLegacy = (A, I, g) => (A = A.replace(/p/g, "i"), (0, Module["dynCall_" + A])(I, ...g)), dynCall = (A, I, g = []) => A.includes("j") ? dynCallLegacy(A, I, g) : getWasmTableEntry(I)(...g), stackSave = () => _emscripten_stack_get_current(), stackRestore = A => __emscripten_stack_restore(A), createInvokeFunction = A => function () { var I = stackSave(); try { return dynCall(A, arguments[0], Array.prototype.slice.call(arguments, 1)) } catch (A) { if (stackRestore(I), A !== A + 0) throw A; _setThrew(1, 0) } }, resolveGlobalSymbol = (A, I = !1) => { var g; return I && "orig$" + A in wasmImports && (A = "orig$" + A), isSymbolDefined(A) ? g = wasmImports[A] : A.startsWith("invoke_") && (g = wasmImports[A] = createInvokeFunction(A.split("_")[1])), { sym: g, name: A } }, UTF8ToString = (A, I) => A ? UTF8ArrayToString(HEAPU8, A, I) : "", loadWebAssemblyModule = (binary, flags, libName, localScope, handle) => { var metadata = getDylinkMetadata(binary); function loadModule() { var firstLoad = !handle || !HEAP8[handle + 8]; if (firstLoad) { var memAlign = Math.pow(2, metadata.memoryAlign), memoryBase = metadata.memorySize ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign) : 0, tableBase = metadata.tableSize ? wasmTable.length : 0; handle && (HEAP8[handle + 8] = 1, HEAPU32[handle + 12 >> 2] = memoryBase, HEAP32[handle + 16 >> 2] = metadata.memorySize, HEAPU32[handle + 20 >> 2] = tableBase, HEAP32[handle + 24 >> 2] = metadata.tableSize) } else memoryBase = HEAPU32[handle + 12 >> 2], tableBase = HEAPU32[handle + 20 >> 2]; var tableGrowthNeeded = tableBase + metadata.tableSize - wasmTable.length, moduleExports; function resolveSymbol(A) { var I = resolveGlobalSymbol(A).sym; return !I && localScope && (I = localScope[A]), I || (I = moduleExports[A]), I } tableGrowthNeeded > 0 && wasmTable.grow(tableGrowthNeeded); var proxyHandler = { get(A, I) { switch (I) { case "__memory_base": return memoryBase; case "__table_base": return tableBase }if (I in wasmImports && !wasmImports[I].stub) return wasmImports[I]; var g; I in A || (A[I] = (...A) => (g ||= resolveSymbol(I), g(...A))); return A[I] } }, proxy = new Proxy({}, proxyHandler), info = { "GOT.mem": new Proxy({}, GOTHandler), "GOT.func": new Proxy({}, GOTHandler), env: proxy, wasi_snapshot_preview1: proxy }; function postInstantiation(module, instance) { function addEmAsm(addr, body) { for (var args = [], arity = 0; arity < 16 && -1 != body.indexOf("$" + arity); arity++)args.push("$" + arity); args = args.join(","); var func = `(${args}) => { ${body} };`; ASM_CONSTS[start] = eval(func) } if (updateTableMap(tableBase, metadata.tableSize), moduleExports = relocateExports(instance.exports, memoryBase), flags.allowUndefined || reportUndefinedSymbols(), "__start_em_asm" in moduleExports) for (var start = moduleExports.__start_em_asm, stop = moduleExports.__stop_em_asm; start < stop;) { var jsString = UTF8ToString(start); addEmAsm(start, jsString), start = HEAPU8.indexOf(0, start) + 1 } function addEmJs(name, cSig, body) { var jsArgs = []; if (cSig = cSig.slice(1, -1), "void" != cSig) for (var i in cSig = cSig.split(","), cSig) { var jsArg = cSig[i].split(" ").pop(); jsArgs.push(jsArg.replace("*", "")) } var func = `(${jsArgs}) => ${body};`; moduleExports[name] = eval(func) } for (var name in moduleExports) if (name.startsWith("__em_js__")) { var start = moduleExports[name], jsString = UTF8ToString(start), parts = jsString.split("<::>"); addEmJs(name.replace("__em_js__", ""), parts[0], parts[1]), delete moduleExports[name] } var applyRelocs = moduleExports.__wasm_apply_data_relocs; applyRelocs && (runtimeInitialized ? applyRelocs() : __RELOC_FUNCS__.push(applyRelocs)); var init = moduleExports.__wasm_call_ctors; return init && (runtimeInitialized ? init() : __ATINIT__.push(init)), moduleExports } if (flags.loadAsync) { if (binary instanceof WebAssembly.Module) { var instance = new WebAssembly.Instance(binary, info); return Promise.resolve(postInstantiation(binary, instance)) } return WebAssembly.instantiate(binary, info).then((A => postInstantiation(A.module, A.instance))) } var module = binary instanceof WebAssembly.Module ? binary : new WebAssembly.Module(binary), instance = new WebAssembly.Instance(module, info); return postInstantiation(module, instance) } return currentModuleWeakSymbols = metadata.weakImports, flags.loadAsync ? metadata.neededDynlibs.reduce(((A, I) => A.then((() => loadDynamicLibrary(I, flags)))), Promise.resolve()).then(loadModule) : (metadata.neededDynlibs.forEach((A => loadDynamicLibrary(A, flags, localScope))), loadModule()) }, mergeLibSymbols = (A, I) => { for (var [g, Q] of Object.entries(A)) { const A = A => { isSymbolDefined(A) || (wasmImports[A] = Q) }; A(g); const I = "__main_argc_argv"; "main" == g && A(I), g == I && A("main"), g.startsWith("dynCall_") && !Module.hasOwnProperty(g) && (Module[g] = Q) } }, asyncLoad = (A, I, g, Q) => { var B = Q ? "" : getUniqueRunDependency(`al ${A}`); readAsync(A, (A => { I(new Uint8Array(A)), B && removeRunDependency(B) }), (I => { if (!g) throw `Loading data file "${A}" failed.`; g() })), B && addRunDependency(B) }; function loadDynamicLibrary(A, I = { global: !0, nodelete: !0 }, g, Q) { var B = LDSO.loadedLibsByName[A]; if (B) return I.global ? B.global || (B.global = !0, mergeLibSymbols(B.exports, A)) : g && Object.assign(g, B.exports), I.nodelete && B.refcount !== 1 / 0 && (B.refcount = 1 / 0), B.refcount++, Q && (LDSO.loadedLibsByHandle[Q] = B), !I.loadAsync || Promise.resolve(!0); function E() { if (Q) { var g = HEAPU32[Q + 28 >> 2], B = HEAPU32[Q + 32 >> 2]; if (g && B) { var E = HEAP8.slice(g, g + B); return I.loadAsync ? Promise.resolve(E) : E } } var o = locateFile(A); if (I.loadAsync) return new Promise((function (A, I) { asyncLoad(o, A, I) })); if (!readBinary) throw new Error(`${o}: file not found, and synchronous loading of external files is not available`); return readBinary(o) } function o() { return I.loadAsync ? E().then((B => loadWebAssemblyModule(B, I, A, g, Q))) : loadWebAssemblyModule(E(), I, A, g, Q) } function s(I) { B.global ? mergeLibSymbols(I, A) : g && Object.assign(g, I), B.exports = I } return (B = newDSO(A, Q, "loading")).refcount = I.nodelete ? 1 / 0 : 1, B.global = I.global, I.loadAsync ? o().then((A => (s(A), !0))) : (s(o()), !0) } var reportUndefinedSymbols = () => { for (var [A, I] of Object.entries(GOT)) if (0 == I.value) { var g = resolveGlobalSymbol(A, !0).sym; if (!g && !I.required) continue; if ("function" == typeof g) I.value = addFunction(g, g.sig); else { if ("number" != typeof g) throw new Error(`bad export type for '${A}': ${typeof g}`); I.value = g } } }, loadDylibs = () => { dynamicLibraries.length ? (addRunDependency("loadDylibs"), dynamicLibraries.reduce(((A, I) => A.then((() => loadDynamicLibrary(I, { loadAsync: !0, global: !0, nodelete: !0, allowUndefined: !0 })))), Promise.resolve()).then((() => { reportUndefinedSymbols(), removeRunDependency("loadDylibs") }))) : reportUndefinedSymbols() }, noExitRuntime = Module.noExitRuntime || !0; function setValue(A, I, g = "i8") { switch (g.endsWith("*") && (g = "*"), g) { case "i1": case "i8": HEAP8[A] = I; break; case "i16": HEAP16[A >> 1] = I; break; case "i32": HEAP32[A >> 2] = I; break; case "i64": abort("to do setValue(i64) use WASM_BIGINT"); case "float": HEAPF32[A >> 2] = I; break; case "double": HEAPF64[A >> 3] = I; break; case "*": HEAPU32[A >> 2] = I; break; default: abort(`invalid type for setValue: ${g}`) } } var ___memory_base = new WebAssembly.Global({ value: "i32", mutable: !1 }, 1024), ___stack_pointer = new WebAssembly.Global({ value: "i32", mutable: !0 }, 78112), ___table_base = new WebAssembly.Global({ value: "i32", mutable: !1 }, 1), nowIsMonotonic = 1, __emscripten_get_now_is_monotonic = () => nowIsMonotonic; __emscripten_get_now_is_monotonic.sig = "i"; var __emscripten_memcpy_js = (A, I, g) => HEAPU8.copyWithin(A, I, I + g); __emscripten_memcpy_js.sig = "vppp"; var _abort = () => { abort("") }; _abort.sig = "v"; var _emscripten_date_now = () => Date.now(), _emscripten_get_now; _emscripten_date_now.sig = "d", _emscripten_get_now = () => performance.now(), _emscripten_get_now.sig = "d"; var getHeapMax = () => 2147483648, growMemory = A => { var I = (A - wasmMemory.buffer.byteLength + 65535) / 65536; try { return wasmMemory.grow(I), updateMemoryViews(), 1 } catch (A) { } }, _emscripten_resize_heap = A => { var I = HEAPU8.length; A >>>= 0; var g = getHeapMax(); if (A > g) return !1; for (var Q, B, E = 1; E <= 4; E *= 2) { var o = I * (1 + .2 / E); o = Math.min(o, A + 100663296); var s = Math.min(g, (Q = Math.max(A, o)) + ((B = 65536) - Q % B) % B); if (growMemory(s)) return !0 } return !1 }; _emscripten_resize_heap.sig = "ip"; var _fd_close = A => 52; _fd_close.sig = "ii"; var convertI32PairToI53Checked = (A, I) => I + 2097152 >>> 0 < 4194305 - !!A ? (A >>> 0) + 4294967296 * I : NaN; function _fd_seek(A, I, g, Q, B) { convertI32PairToI53Checked(I, g); return 70 } _fd_seek.sig = "iiiiip"; var printCharBuffers = [null, [], []], printChar = (A, I) => { var g = printCharBuffers[A]; 0 === I || 10 === I ? ((1 === A ? out : err)(UTF8ArrayToString(g, 0)), g.length = 0) : g.push(I) }, _fd_write = (A, I, g, Q) => { for (var B = 0, E = 0; E < g; E++) { var o = HEAPU32[I >> 2], s = HEAPU32[I + 4 >> 2]; I += 8; for (var e = 0; e < s; e++)printChar(A, HEAPU8[o + e]); B += s } return HEAPU32[Q >> 2] = B, 0 }; function _tree_sitter_log_callback(A, I) { if (currentLogCallback) { const g = UTF8ToString(I); currentLogCallback(g, 0 !== A) } } function _tree_sitter_parse_callback(A, I, g, Q, B) { const E = currentParseCallback(I, { row: g, column: Q }); "string" == typeof E ? (setValue(B, E.length, "i32"), stringToUTF16(E, A, 10240)) : setValue(B, 0, "i32") } _fd_write.sig = "iippp"; var runtimeKeepaliveCounter = 0, keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0, _proc_exit = A => { EXITSTATUS = A, keepRuntimeAlive() || (Module.onExit?.(A), ABORT = !0), quit_(A, new ExitStatus(A)) }; _proc_exit.sig = "vi"; var exitJS = (A, I) => { EXITSTATUS = A, _proc_exit(A) }, handleException = A => { if (A instanceof ExitStatus || "unwind" == A) return EXITSTATUS; quit_(1, A) }, lengthBytesUTF8 = A => { for (var I = 0, g = 0; g < A.length; ++g) { var Q = A.charCodeAt(g); Q <= 127 ? I++ : Q <= 2047 ? I += 2 : Q >= 55296 && Q <= 57343 ? (I += 4, ++g) : I += 3 } return I }, stringToUTF8Array = (A, I, g, Q) => { if (!(Q > 0)) return 0; for (var B = g, E = g + Q - 1, o = 0; o < A.length; ++o) { var s = A.charCodeAt(o); if (s >= 55296 && s <= 57343) s = 65536 + ((1023 & s) << 10) | 1023 & A.charCodeAt(++o); if (s <= 127) { if (g >= E) break; I[g++] = s } else if (s <= 2047) { if (g + 1 >= E) break; I[g++] = 192 | s >> 6, I[g++] = 128 | 63 & s } else if (s <= 65535) { if (g + 2 >= E) break; I[g++] = 224 | s >> 12, I[g++] = 128 | s >> 6 & 63, I[g++] = 128 | 63 & s } else { if (g + 3 >= E) break; I[g++] = 240 | s >> 18, I[g++] = 128 | s >> 12 & 63, I[g++] = 128 | s >> 6 & 63, I[g++] = 128 | 63 & s } } return I[g] = 0, g - B }, stringToUTF8 = (A, I, g) => stringToUTF8Array(A, HEAPU8, I, g), stackAlloc = A => __emscripten_stack_alloc(A), stringToUTF8OnStack = A => { var I = lengthBytesUTF8(A) + 1, g = stackAlloc(I); return stringToUTF8(A, g, I), g }, stringToUTF16 = (A, I, g) => { if (g ??= 2147483647, g < 2) return 0; for (var Q = I, B = (g -= 2) < 2 * A.length ? g / 2 : A.length, E = 0; E < B; ++E) { var o = A.charCodeAt(E); HEAP16[I >> 1] = o, I += 2 } return HEAP16[I >> 1] = 0, I - Q }, AsciiToString = A => { for (var I = ""; ;) { var g = HEAPU8[A++]; if (!g) return I; I += String.fromCharCode(g) } }, wasmImports = { __heap_base: ___heap_base, __indirect_function_table: wasmTable, __memory_base: ___memory_base, __stack_pointer: ___stack_pointer, __table_base: ___table_base, _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic, _emscripten_memcpy_js: __emscripten_memcpy_js, abort: _abort, emscripten_get_now: _emscripten_get_now, emscripten_resize_heap: _emscripten_resize_heap, fd_close: _fd_close, fd_seek: _fd_seek, fd_write: _fd_write, memory: wasmMemory, tree_sitter_log_callback: _tree_sitter_log_callback, tree_sitter_parse_callback: _tree_sitter_parse_callback }, wasmExports = createWasm(), ___wasm_call_ctors = () => (___wasm_call_ctors = wasmExports.__wasm_call_ctors)(), ___wasm_apply_data_relocs = () => (___wasm_apply_data_relocs = wasmExports.__wasm_apply_data_relocs)(), _malloc = Module._malloc = A => (_malloc = Module._malloc = wasmExports.malloc)(A), _calloc = Module._calloc = (A, I) => (_calloc = Module._calloc = wasmExports.calloc)(A, I), _realloc = Module._realloc = (A, I) => (_realloc = Module._realloc = wasmExports.realloc)(A, I), _free = Module._free = A => (_free = Module._free = wasmExports.free)(A), _ts_language_symbol_count = Module._ts_language_symbol_count = A => (_ts_language_symbol_count = Module._ts_language_symbol_count = wasmExports.ts_language_symbol_count)(A), _ts_language_state_count = Module._ts_language_state_count = A => (_ts_language_state_count = Module._ts_language_state_count = wasmExports.ts_language_state_count)(A), _ts_language_version = Module._ts_language_version = A => (_ts_language_version = Module._ts_language_version = wasmExports.ts_language_version)(A), _ts_language_field_count = Module._ts_language_field_count = A => (_ts_language_field_count = Module._ts_language_field_count = wasmExports.ts_language_field_count)(A), _ts_language_next_state = Module._ts_language_next_state = (A, I, g) => (_ts_language_next_state = Module._ts_language_next_state = wasmExports.ts_language_next_state)(A, I, g), _ts_language_symbol_name = Module._ts_language_symbol_name = (A, I) => (_ts_language_symbol_name = Module._ts_language_symbol_name = wasmExports.ts_language_symbol_name)(A, I), _ts_language_symbol_for_name = Module._ts_language_symbol_for_name = (A, I, g, Q) => (_ts_language_symbol_for_name = Module._ts_language_symbol_for_name = wasmExports.ts_language_symbol_for_name)(A, I, g, Q), _strncmp = Module._strncmp = (A, I, g) => (_strncmp = Module._strncmp = wasmExports.strncmp)(A, I, g), _ts_language_symbol_type = Module._ts_language_symbol_type = (A, I) => (_ts_language_symbol_type = Module._ts_language_symbol_type = wasmExports.ts_language_symbol_type)(A, I), _ts_language_field_name_for_id = Module._ts_language_field_name_for_id = (A, I) => (_ts_language_field_name_for_id = Module._ts_language_field_name_for_id = wasmExports.ts_language_field_name_for_id)(A, I), _ts_lookahead_iterator_new = Module._ts_lookahead_iterator_new = (A, I) => (_ts_lookahead_iterator_new = Module._ts_lookahead_iterator_new = wasmExports.ts_lookahead_iterator_new)(A, I), _ts_lookahead_iterator_delete = Module._ts_lookahead_iterator_delete = A => (_ts_lookahead_iterator_delete = Module._ts_lookahead_iterator_delete = wasmExports.ts_lookahead_iterator_delete)(A), _ts_lookahead_iterator_reset_state = Module._ts_lookahead_iterator_reset_state = (A, I) => (_ts_lookahead_iterator_reset_state = Module._ts_lookahead_iterator_reset_state = wasmExports.ts_lookahead_iterator_reset_state)(A, I), _ts_lookahead_iterator_reset = Module._ts_lookahead_iterator_reset = (A, I, g) => (_ts_lookahead_iterator_reset = Module._ts_lookahead_iterator_reset = wasmExports.ts_lookahead_iterator_reset)(A, I, g), _ts_lookahead_iterator_next = Module._ts_lookahead_iterator_next = A => (_ts_lookahead_iterator_next = Module._ts_lookahead_iterator_next = wasmExports.ts_lookahead_iterator_next)(A), _ts_lookahead_iterator_current_symbol = Module._ts_lookahead_iterator_current_symbol = A => (_ts_lookahead_iterator_current_symbol = Module._ts_lookahead_iterator_current_symbol = wasmExports.ts_lookahead_iterator_current_symbol)(A), _memset = Module._memset = (A, I, g) => (_memset = Module._memset = wasmExports.memset)(A, I, g), _memcpy = Module._memcpy = (A, I, g) => (_memcpy = Module._memcpy = wasmExports.memcpy)(A, I, g), _ts_parser_delete = Module._ts_parser_delete = A => (_ts_parser_delete = Module._ts_parser_delete = wasmExports.ts_parser_delete)(A), _ts_parser_reset = Module._ts_parser_reset = A => (_ts_parser_reset = Module._ts_parser_reset = wasmExports.ts_parser_reset)(A), _ts_parser_set_language = Module._ts_parser_set_language = (A, I) => (_ts_parser_set_language = Module._ts_parser_set_language = wasmExports.ts_parser_set_language)(A, I), _ts_parser_timeout_micros = Module._ts_parser_timeout_micros = A => (_ts_parser_timeout_micros = Module._ts_parser_timeout_micros = wasmExports.ts_parser_timeout_micros)(A), _ts_parser_set_timeout_micros = Module._ts_parser_set_timeout_micros = (A, I, g) => (_ts_parser_set_timeout_micros = Module._ts_parser_set_timeout_micros = wasmExports.ts_parser_set_timeout_micros)(A, I, g), _ts_parser_set_included_ranges = Module._ts_parser_set_included_ranges = (A, I, g) => (_ts_parser_set_included_ranges = Module._ts_parser_set_included_ranges = wasmExports.ts_parser_set_included_ranges)(A, I, g), _memmove = Module._memmove = (A, I, g) => (_memmove = Module._memmove = wasmExports.memmove)(A, I, g), _memcmp = Module._memcmp = (A, I, g) => (_memcmp = Module._memcmp = wasmExports.memcmp)(A, I, g), _ts_query_new = Module._ts_query_new = (A, I, g, Q, B) => (_ts_query_new = Module._ts_query_new = wasmExports.ts_query_new)(A, I, g, Q, B), _ts_query_delete = Module._ts_query_delete = A => (_ts_query_delete = Module._ts_query_delete = wasmExports.ts_query_delete)(A), _iswspace = Module._iswspace = A => (_iswspace = Module._iswspace = wasmExports.iswspace)(A), _iswalnum = Module._iswalnum = A => (_iswalnum = Module._iswalnum = wasmExports.iswalnum)(A), _ts_query_pattern_count = Module._ts_query_pattern_count = A => (_ts_query_pattern_count = Module._ts_query_pattern_count = wasmExports.ts_query_pattern_count)(A), _ts_query_capture_count = Module._ts_query_capture_count = A => (_ts_query_capture_count = Module._ts_query_capture_count = wasmExports.ts_query_capture_count)(A), _ts_query_string_count = Module._ts_query_string_count = A => (_ts_query_string_count = Module._ts_query_string_count = wasmExports.ts_query_string_count)(A), _ts_query_capture_name_for_id = Module._ts_query_capture_name_for_id = (A, I, g) => (_ts_query_capture_name_for_id = Module._ts_query_capture_name_for_id = wasmExports.ts_query_capture_name_for_id)(A, I, g), _ts_query_string_value_for_id = Module._ts_query_string_value_for_id = (A, I, g) => (_ts_query_string_value_for_id = Module._ts_query_string_value_for_id = wasmExports.ts_query_string_value_for_id)(A, I, g), _ts_query_predicates_for_pattern = Module._ts_query_predicates_for_pattern = (A, I, g) => (_ts_query_predicates_for_pattern = Module._ts_query_predicates_for_pattern = wasmExports.ts_query_predicates_for_pattern)(A, I, g), _ts_query_disable_capture = Module._ts_query_disable_capture = (A, I, g) => (_ts_query_disable_capture = Module._ts_query_disable_capture = wasmExports.ts_query_disable_capture)(A, I, g), _ts_tree_copy = Module._ts_tree_copy = A => (_ts_tree_copy = Module._ts_tree_copy = wasmExports.ts_tree_copy)(A), _ts_tree_delete = Module._ts_tree_delete = A => (_ts_tree_delete = Module._ts_tree_delete = wasmExports.ts_tree_delete)(A), _ts_init = Module._ts_init = () => (_ts_init = Module._ts_init = wasmExports.ts_init)(), _ts_parser_new_wasm = Module._ts_parser_new_wasm = () => (_ts_parser_new_wasm = Module._ts_parser_new_wasm = wasmExports.ts_parser_new_wasm)(), _ts_parser_enable_logger_wasm = Module._ts_parser_enable_logger_wasm = (A, I) => (_ts_parser_enable_logger_wasm = Module._ts_parser_enable_logger_wasm = wasmExports.ts_parser_enable_logger_wasm)(A, I), _ts_parser_parse_wasm = Module._ts_parser_parse_wasm = (A, I, g, Q, B) => (_ts_parser_parse_wasm = Module._ts_parser_parse_wasm = wasmExports.ts_parser_parse_wasm)(A, I, g, Q, B), _ts_parser_included_ranges_wasm = Module._ts_parser_included_ranges_wasm = A => (_ts_parser_included_ranges_wasm = Module._ts_parser_included_ranges_wasm = wasmExports.ts_parser_included_ranges_wasm)(A), _ts_language_type_is_named_wasm = Module._ts_language_type_is_named_wasm = (A, I) => (_ts_language_type_is_named_wasm = Module._ts_language_type_is_named_wasm = wasmExports.ts_language_type_is_named_wasm)(A, I), _ts_language_type_is_visible_wasm = Module._ts_language_type_is_visible_wasm = (A, I) => (_ts_language_type_is_visible_wasm = Module._ts_language_type_is_visible_wasm = wasmExports.ts_language_type_is_visible_wasm)(A, I), _ts_tree_root_node_wasm = Module._ts_tree_root_node_wasm = A => (_ts_tree_root_node_wasm = Module._ts_tree_root_node_wasm = wasmExports.ts_tree_root_node_wasm)(A), _ts_tree_root_node_with_offset_wasm = Module._ts_tree_root_node_with_offset_wasm = A => (_ts_tree_root_node_with_offset_wasm = Module._ts_tree_root_node_with_offset_wasm = wasmExports.ts_tree_root_node_with_offset_wasm)(A), _ts_tree_edit_wasm = Module._ts_tree_edit_wasm = A => (_ts_tree_edit_wasm = Module._ts_tree_edit_wasm = wasmExports.ts_tree_edit_wasm)(A), _ts_tree_included_ranges_wasm = Module._ts_tree_included_ranges_wasm = A => (_ts_tree_included_ranges_wasm = Module._ts_tree_included_ranges_wasm = wasmExports.ts_tree_included_ranges_wasm)(A), _ts_tree_get_changed_ranges_wasm = Module._ts_tree_get_changed_ranges_wasm = (A, I) => (_ts_tree_get_changed_ranges_wasm = Module._ts_tree_get_changed_ranges_wasm = wasmExports.ts_tree_get_changed_ranges_wasm)(A, I), _ts_tree_cursor_new_wasm = Module._ts_tree_cursor_new_wasm = A => (_ts_tree_cursor_new_wasm = Module._ts_tree_cursor_new_wasm = wasmExports.ts_tree_cursor_new_wasm)(A), _ts_tree_cursor_delete_wasm = Module._ts_tree_cursor_delete_wasm = A => (_ts_tree_cursor_delete_wasm = Module._ts_tree_cursor_delete_wasm = wasmExports.ts_tree_cursor_delete_wasm)(A), _ts_tree_cursor_reset_wasm = Module._ts_tree_cursor_reset_wasm = A => (_ts_tree_cursor_reset_wasm = Module._ts_tree_cursor_reset_wasm = wasmExports.ts_tree_cursor_reset_wasm)(A), _ts_tree_cursor_reset_to_wasm = Module._ts_tree_cursor_reset_to_wasm = (A, I) => (_ts_tree_cursor_reset_to_wasm = Module._ts_tree_cursor_reset_to_wasm = wasmExports.ts_tree_cursor_reset_to_wasm)(A, I), _ts_tree_cursor_goto_first_child_wasm = Module._ts_tree_cursor_goto_first_child_wasm = A => (_ts_tree_cursor_goto_first_child_wasm = Module._ts_tree_cursor_goto_first_child_wasm = wasmExports.ts_tree_cursor_goto_first_child_wasm)(A), _ts_tree_cursor_goto_last_child_wasm = Module._ts_tree_cursor_goto_last_child_wasm = A => (_ts_tree_cursor_goto_last_child_wasm = Module._ts_tree_cursor_goto_last_child_wasm = wasmExports.ts_tree_cursor_goto_last_child_wasm)(A), _ts_tree_cursor_goto_first_child_for_index_wasm = Module._ts_tree_cursor_goto_first_child_for_index_wasm = A => (_ts_tree_cursor_goto_first_child_for_index_wasm = Module._ts_tree_cursor_goto_first_child_for_index_wasm = wasmExports.ts_tree_cursor_goto_first_child_for_index_wasm)(A), _ts_tree_cursor_goto_first_child_for_position_wasm = Module._ts_tree_cursor_goto_first_child_for_position_wasm = A => (_ts_tree_cursor_goto_first_child_for_position_wasm = Module._ts_tree_cursor_goto_first_child_for_position_wasm = wasmExports.ts_tree_cursor_goto_first_child_for_position_wasm)(A), _ts_tree_cursor_goto_next_sibling_wasm = Module._ts_tree_cursor_goto_next_sibling_wasm = A => (_ts_tree_cursor_goto_next_sibling_wasm = Module._ts_tree_cursor_goto_next_sibling_wasm = wasmExports.ts_tree_cursor_goto_next_sibling_wasm)(A), _ts_tree_cursor_goto_previous_sibling_wasm = Module._ts_tree_cursor_goto_previous_sibling_wasm = A => (_ts_tree_cursor_goto_previous_sibling_wasm = Module._ts_tree_cursor_goto_previous_sibling_wasm = wasmExports.ts_tree_cursor_goto_previous_sibling_wasm)(A), _ts_tree_cursor_goto_descendant_wasm = Module._ts_tree_cursor_goto_descendant_wasm = (A, I) => (_ts_tree_cursor_goto_descendant_wasm = Module._ts_tree_cursor_goto_descendant_wasm = wasmExports.ts_tree_cursor_goto_descendant_wasm)(A, I), _ts_tree_cursor_goto_parent_wasm = Module._ts_tree_cursor_goto_parent_wasm = A => (_ts_tree_cursor_goto_parent_wasm = Module._ts_tree_cursor_goto_parent_wasm = wasmExports.ts_tree_cursor_goto_parent_wasm)(A), _ts_tree_cursor_current_node_type_id_wasm = Module._ts_tree_cursor_current_node_type_id_wasm = A => (_ts_tree_cursor_current_node_type_id_wasm = Module._ts_tree_cursor_current_node_type_id_wasm = wasmExports.ts_tree_cursor_current_node_type_id_wasm)(A), _ts_tree_cursor_current_node_state_id_wasm = Module._ts_tree_cursor_current_node_state_id_wasm = A => (_ts_tree_cursor_current_node_state_id_wasm = Module._ts_tree_cursor_current_node_state_id_wasm = wasmExports.ts_tree_cursor_current_node_state_id_wasm)(A), _ts_tree_cursor_current_node_is_named_wasm = Module._ts_tree_cursor_current_node_is_named_wasm = A => (_ts_tree_cursor_current_node_is_named_wasm = Module._ts_tree_cursor_current_node_is_named_wasm = wasmExports.ts_tree_cursor_current_node_is_named_wasm)(A), _ts_tree_cursor_current_node_is_missing_wasm = Module._ts_tree_cursor_current_node_is_missing_wasm = A => (_ts_tree_cursor_current_node_is_missing_wasm = Module._ts_tree_cursor_current_node_is_missing_wasm = wasmExports.ts_tree_cursor_current_node_is_missing_wasm)(A), _ts_tree_cursor_current_node_id_wasm = Module._ts_tree_cursor_current_node_id_wasm = A => (_ts_tree_cursor_current_node_id_wasm = Module._ts_tree_cursor_current_node_id_wasm = wasmExports.ts_tree_cursor_current_node_id_wasm)(A), _ts_tree_cursor_start_position_wasm = Module._ts_tree_cursor_start_position_wasm = A => (_ts_tree_cursor_start_position_wasm = Module._ts_tree_cursor_start_position_wasm = wasmExports.ts_tree_cursor_start_position_wasm)(A), _ts_tree_cursor_end_position_wasm = Module._ts_tree_cursor_end_position_wasm = A => (_ts_tree_cursor_end_position_wasm = Module._ts_tree_cursor_end_position_wasm = wasmExports.ts_tree_cursor_end_position_wasm)(A), _ts_tree_cursor_start_index_wasm = Module._ts_tree_cursor_start_index_wasm = A => (_ts_tree_cursor_start_index_wasm = Module._ts_tree_cursor_start_index_wasm = wasmExports.ts_tree_cursor_start_index_wasm)(A), _ts_tree_cursor_end_index_wasm = Module._ts_tree_cursor_end_index_wasm = A => (_ts_tree_cursor_end_index_wasm = Module._ts_tree_cursor_end_index_wasm = wasmExports.ts_tree_cursor_end_index_wasm)(A), _ts_tree_cursor_current_field_id_wasm = Module._ts_tree_cursor_current_field_id_wasm = A => (_ts_tree_cursor_current_field_id_wasm = Module._ts_tree_cursor_current_field_id_wasm = wasmExports.ts_tree_cursor_current_field_id_wasm)(A), _ts_tree_cursor_current_depth_wasm = Module._ts_tree_cursor_current_depth_wasm = A => (_ts_tree_cursor_current_depth_wasm = Module._ts_tree_cursor_current_depth_wasm = wasmExports.ts_tree_cursor_current_depth_wasm)(A), _ts_tree_cursor_current_descendant_index_wasm = Module._ts_tree_cursor_current_descendant_index_wasm = A => (_ts_tree_cursor_current_descendant_index_wasm = Module._ts_tree_cursor_current_descendant_index_wasm = wasmExports.ts_tree_cursor_current_descendant_index_wasm)(A), _ts_tree_cursor_current_node_wasm = Module._ts_tree_cursor_current_node_wasm = A => (_ts_tree_cursor_current_node_wasm = Module._ts_tree_cursor_current_node_wasm = wasmExports.ts_tree_cursor_current_node_wasm)(A), _ts_node_symbol_wasm = Module._ts_node_symbol_wasm = A => (_ts_node_symbol_wasm = Module._ts_node_symbol_wasm = wasmExports.ts_node_symbol_wasm)(A), _ts_node_field_name_for_child_wasm = Module._ts_node_field_name_for_child_wasm = (A, I) => (_ts_node_field_name_for_child_wasm = Module._ts_node_field_name_for_child_wasm = wasmExports.ts_node_field_name_for_child_wasm)(A, I), _ts_node_children_by_field_id_wasm = Module._ts_node_children_by_field_id_wasm = (A, I) => (_ts_node_children_by_field_id_wasm = Module._ts_node_children_by_field_id_wasm = wasmExports.ts_node_children_by_field_id_wasm)(A, I), _ts_node_first_child_for_byte_wasm = Module._ts_node_first_child_for_byte_wasm = A => (_ts_node_first_child_for_byte_wasm = Module._ts_node_first_child_for_byte_wasm = wasmExports.ts_node_first_child_for_byte_wasm)(A), _ts_node_first_named_child_for_byte_wasm = Module._ts_node_first_named_child_for_byte_wasm = A => (_ts_node_first_named_child_for_byte_wasm = Module._ts_node_first_named_child_for_byte_wasm = wasmExports.ts_node_first_named_child_for_byte_wasm)(A), _ts_node_grammar_symbol_wasm = Module._ts_node_grammar_symbol_wasm = A => (_ts_node_grammar_symbol_wasm = Module._ts_node_grammar_symbol_wasm = wasmExports.ts_node_grammar_symbol_wasm)(A), _ts_node_child_count_wasm = Module._ts_node_child_count_wasm = A => (_ts_node_child_count_wasm = Module._ts_node_child_count_wasm = wasmExports.ts_node_child_count_wasm)(A), _ts_node_named_child_count_wasm = Module._ts_node_named_child_count_wasm = A => (_ts_node_named_child_count_wasm = Module._ts_node_named_child_count_wasm = wasmExports.ts_node_named_child_count_wasm)(A), _ts_node_child_wasm = Module._ts_node_child_wasm = (A, I) => (_ts_node_child_wasm = Module._ts_node_child_wasm = wasmExports.ts_node_child_wasm)(A, I), _ts_node_named_child_wasm = Module._ts_node_named_child_wasm = (A, I) => (_ts_node_named_child_wasm = Module._ts_node_named_child_wasm = wasmExports.ts_node_named_child_wasm)(A, I), _ts_node_child_by_field_id_wasm = Module._ts_node_child_by_field_id_wasm = (A, I) => (_ts_node_child_by_field_id_wasm = Module._ts_node_child_by_field_id_wasm = wasmExports.ts_node_child_by_field_id_wasm)(A, I), _ts_node_next_sibling_wasm = Module._ts_node_next_sibling_wasm = A => (_ts_node_next_sibling_wasm = Module._ts_node_next_sibling_wasm = wasmExports.ts_node_next_sibling_wasm)(A), _ts_node_prev_sibling_wasm = Module._ts_node_prev_sibling_wasm = A => (_ts_node_prev_sibling_wasm = Module._ts_node_prev_sibling_wasm = wasmExports.ts_node_prev_sibling_wasm)(A), _ts_node_next_named_sibling_wasm = Module._ts_node_next_named_sibling_wasm = A => (_ts_node_next_named_sibling_wasm = Module._ts_node_next_named_sibling_wasm = wasmExports.ts_node_next_named_sibling_wasm)(A), _ts_node_prev_named_sibling_wasm = Module._ts_node_prev_named_sibling_wasm = A => (_ts_node_prev_named_sibling_wasm = Module._ts_node_prev_named_sibling_wasm = wasmExports.ts_node_prev_named_sibling_wasm)(A), _ts_node_descendant_count_wasm = Module._ts_node_descendant_count_wasm = A => (_ts_node_descendant_count_wasm = Module._ts_node_descendant_count_wasm = wasmExports.ts_node_descendant_count_wasm)(A), _ts_node_parent_wasm = Module._ts_node_parent_wasm = A => (_ts_node_parent_wasm = Module._ts_node_parent_wasm = wasmExports.ts_node_parent_wasm)(A), _ts_node_descendant_for_index_wasm = Module._ts_node_descendant_for_index_wasm = A => (_ts_node_descendant_for_index_wasm = Module._ts_node_descendant_for_index_wasm = wasmExports.ts_node_descendant_for_index_wasm)(A), _ts_node_named_descendant_for_index_wasm = Module._ts_node_named_descendant_for_index_wasm = A => (_ts_node_named_descendant_for_index_wasm = Module._ts_node_named_descendant_for_index_wasm = wasmExports.ts_node_named_descendant_for_index_wasm)(A), _ts_node_descendant_for_position_wasm = Module._ts_node_descendant_for_position_wasm = A => (_ts_node_descendant_for_position_wasm = Module._ts_node_descendant_for_position_wasm = wasmExports.ts_node_descendant_for_position_wasm)(A), _ts_node_named_descendant_for_position_wasm = Module._ts_node_named_descendant_for_position_wasm = A => (_ts_node_named_descendant_for_position_wasm = Module._ts_node_named_descendant_for_position_wasm = wasmExports.ts_node_named_descendant_for_position_wasm)(A), _ts_node_start_point_wasm = Module._ts_node_start_point_wasm = A => (_ts_node_start_point_wasm = Module._ts_node_start_point_wasm = wasmExports.ts_node_start_point_wasm)(A), _ts_node_end_point_wasm = Module._ts_node_end_point_wasm = A => (_ts_node_end_point_wasm = Module._ts_node_end_point_wasm = wasmExports.ts_node_end_point_wasm)(A), _ts_node_start_index_wasm = Module._ts_node_start_index_wasm = A => (_ts_node_start_index_wasm = Module._ts_node_start_index_wasm = wasmExports.ts_node_start_index_wasm)(A), _ts_node_end_index_wasm = Module._ts_node_end_index_wasm = A => (_ts_node_end_index_wasm = Module._ts_node_end_index_wasm = wasmExports.ts_node_end_index_wasm)(A), _ts_node_to_string_wasm = Module._ts_node_to_string_wasm = A => (_ts_node_to_string_wasm = Module._ts_node_to_string_wasm = wasmExports.ts_node_to_string_wasm)(A), _ts_node_children_wasm = Module._ts_node_children_wasm = A => (_ts_node_children_wasm = Module._ts_node_children_wasm = wasmExports.ts_node_children_wasm)(A), _ts_node_named_children_wasm = Module._ts_node_named_children_wasm = A => (_ts_node_named_children_wasm = Module._ts_node_named_children_wasm = wasmExports.ts_node_named_children_wasm)(A), _ts_node_descendants_of_type_wasm = Module._ts_node_descendants_of_type_wasm = (A, I, g, Q, B, E, o) => (_ts_node_descendants_of_type_wasm = Module._ts_node_descendants_of_type_wasm = wasmExports.ts_node_descendants_of_type_wasm)(A, I, g, Q, B, E, o), _ts_node_is_named_wasm = Module._ts_node_is_named_wasm = A => (_ts_node_is_named_wasm = Module._ts_node_is_named_wasm = wasmExports.ts_node_is_named_wasm)(A), _ts_node_has_changes_wasm = Module._ts_node_has_changes_wasm = A => (_ts_node_has_changes_wasm = Module._ts_node_has_changes_wasm = wasmExports.ts_node_has_changes_wasm)(A), _ts_node_has_error_wasm = Module._ts_node_has_error_wasm = A => (_ts_node_has_error_wasm = Module._ts_node_has_error_wasm = wasmExports.ts_node_has_error_wasm)(A), _ts_node_is_error_wasm = Module._ts_node_is_error_wasm = A => (_ts_node_is_error_wasm = Module._ts_node_is_error_wasm = wasmExports.ts_node_is_error_wasm)(A), _ts_node_is_missing_wasm = Module._ts_node_is_missing_wasm = A => (_ts_node_is_missing_wasm = Module._ts_node_is_missing_wasm = wasmExports.ts_node_is_missing_wasm)(A), _ts_node_is_extra_wasm = Module._ts_node_is_extra_wasm = A => (_ts_node_is_extra_wasm = Module._ts_node_is_extra_wasm = wasmExports.ts_node_is_extra_wasm)(A), _ts_node_parse_state_wasm = Module._ts_node_parse_state_wasm = A => (_ts_node_parse_state_wasm = Module._ts_node_parse_state_wasm = wasmExports.ts_node_parse_state_wasm)(A), _ts_node_next_parse_state_wasm = Module._ts_node_next_parse_state_wasm = A => (_ts_node_next_parse_state_wasm = Module._ts_node_next_parse_state_wasm = wasmExports.ts_node_next_parse_state_wasm)(A), _ts_query_matches_wasm = Module._ts_query_matches_wasm = (A, I, g, Q, B, E, o, s, e, D) => (_ts_query_matches_wasm = Module._ts_query_matches_wasm = wasmExports.ts_query_matches_wasm)(A, I, g, Q, B, E, o, s, e, D), _ts_query_captures_wasm = Module._ts_query_captures_wasm = (A, I, g, Q, B, E, o, s, e, D) => (_ts_query_captures_wasm = Module._ts_query_captures_wasm = wasmExports.ts_query_captures_wasm)(A, I, g, Q, B, E, o, s, e, D), _iswalpha = Module._iswalpha = A => (_iswalpha = Module._iswalpha = wasmExports.iswalpha)(A), _iswblank = Module._iswblank = A => (_iswblank = Module._iswblank = wasmExports.iswblank)(A), _iswdigit = Module._iswdigit = A => (_iswdigit = Module._iswdigit = wasmExports.iswdigit)(A), _iswlower = Module._iswlower = A => (_iswlower = Module._iswlower = wasmExports.iswlower)(A), _iswupper = Module._iswupper = A => (_iswupper = Module._iswupper = wasmExports.iswupper)(A), _iswxdigit = Module._iswxdigit = A => (_iswxdigit = Module._iswxdigit = wasmExports.iswxdigit)(A), _memchr = Module._memchr = (A, I, g) => (_memchr = Module._memchr = wasmExports.memchr)(A, I, g), _strlen = Module._strlen = A => (_strlen = Module._strlen = wasmExports.strlen)(A), _strcmp = Module._strcmp = (A, I) => (_strcmp = Module._strcmp = wasmExports.strcmp)(A, I), _strncat = Module._strncat = (A, I, g) => (_strncat = Module._strncat = wasmExports.strncat)(A, I, g), _strncpy = Module._strncpy = (A, I, g) => (_strncpy = Module._strncpy = wasmExports.strncpy)(A, I, g), _towlower = Module._towlower = A => (_towlower = Module._towlower = wasmExports.towlower)(A), _towupper = Module._towupper = A => (_towupper = Module._towupper = wasmExports.towupper)(A), _setThrew = (A, I) => (_setThrew = wasmExports.setThrew)(A, I), __emscripten_stack_restore = A => (__emscripten_stack_restore = wasmExports._emscripten_stack_restore)(A), __emscripten_stack_alloc = A => (__emscripten_stack_alloc = wasmExports._emscripten_stack_alloc)(A), _emscripten_stack_get_current = () => (_emscripten_stack_get_current = wasmExports.emscripten_stack_get_current)(), dynCall_jiji = Module.dynCall_jiji = (A, I, g, Q, B) => (dynCall_jiji = Module.dynCall_jiji = wasmExports.dynCall_jiji)(A, I, g, Q, B), _orig$ts_parser_timeout_micros = Module._orig$ts_parser_timeout_micros = A => (_orig$ts_parser_timeout_micros = Module._orig$ts_parser_timeout_micros = wasmExports.orig$ts_parser_timeout_micros)(A), _orig$ts_parser_set_timeout_micros = Module._orig$ts_parser_set_timeout_micros = (A, I) => (_orig$ts_parser_set_timeout_micros = Module._orig$ts_parser_set_timeout_micros = wasmExports.orig$ts_parser_set_timeout_micros)(A, I), calledRun; function callMain(A = []) { var I = resolveGlobalSymbol("main").sym; if (I) { A.unshift(thisProgram); var g = A.length, Q = stackAlloc(4 * (g + 1)), B = Q; A.forEach((A => { HEAPU32[B >> 2] = stringToUTF8OnStack(A), B += 4 })), HEAPU32[B >> 2] = 0; try { var E = I(g, Q); return exitJS(E, !0), E } catch (A) { return handleException(A) } } } function run(A = arguments_) { function I() { calledRun || (calledRun = !0, Module.calledRun = !0, ABORT || (initRuntime(), preMain(), Module.onRuntimeInitialized && Module.onRuntimeInitialized(), shouldRunNow && callMain(A), postRun())) } runDependencies > 0 || (preRun(), runDependencies > 0 || (Module.setStatus ? (Module.setStatus("Running..."), setTimeout((function () { setTimeout((function () { Module.setStatus("") }), 1), I() }), 1)) : I())) } if (Module.AsciiToString = AsciiToString, Module.stringToUTF16 = stringToUTF16, dependenciesFulfilled = function A() { calledRun || run(), calledRun || (dependenciesFulfilled = A) }, Module.preInit) for ("function" == typeof Module.preInit && (Module.preInit = [Module.preInit]); Module.preInit.length > 0;)Module.preInit.pop()(); var shouldRunNow = !0; Module.noInitialRun && (shouldRunNow = !1), run(); const C = Module, INTERNAL = {}, SIZE_OF_INT = 4, SIZE_OF_CURSOR = 4 * SIZE_OF_INT, SIZE_OF_NODE = 5 * SIZE_OF_INT, SIZE_OF_POINT = 2 * SIZE_OF_INT, SIZE_OF_RANGE = 2 * SIZE_OF_INT + 2 * SIZE_OF_POINT, ZERO_POINT = { row: 0, column: 0 }, QUERY_WORD_REGEX = /[\w-.]*/g, PREDICATE_STEP_TYPE_CAPTURE = 1, PREDICATE_STEP_TYPE_STRING = 2, LANGUAGE_FUNCTION_REGEX = /^_?tree_sitter_\w+/; let VERSION, MIN_COMPATIBLE_VERSION, TRANSFER_BUFFER, currentParseCallback, currentLogCallback; class ParserImpl { static init() { TRANSFER_BUFFER = C._ts_init(), VERSION = getValue(TRANSFER_BUFFER, "i32"), MIN_COMPATIBLE_VERSION = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32") } initialize() { C._ts_parser_new_wasm(), this[0] = getValue(TRANSFER_BUFFER, "i32"), this[1] = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32") } delete() { C._ts_parser_delete(this[0]), C._free(this[1]), this[0] = 0, this[1] = 0 } setLanguage(A) { let I; if (A) { if (A.constructor !== Language) throw new Error("Argument must be a Language"); { I = A[0]; const g = C._ts_language_version(I); if (g < MIN_COMPATIBLE_VERSION || VERSION < g) throw new Error(`Incompatible language version ${g}. Compatibility range ${MIN_COMPATIBLE_VERSION} through ${VERSION}.`) } } else I = 0, A = null; return this.language = A, C._ts_parser_set_language(this[0], I), this } getLanguage() { return this.language } parse(A, I, g) { if ("string" == typeof A) currentParseCallback = (I, g) => A.slice(I); else { if ("function" != typeof A) throw new Error("Argument must be a string or a function"); currentParseCallback = A } this.logCallback ? (currentLogCallback = this.logCallback, C._ts_parser_enable_logger_wasm(this[0], 1)) : (currentLogCallback = null, C._ts_parser_enable_logger_wasm(this[0], 0)); let Q = 0, B = 0; if (g?.includedRanges) { Q = g.includedRanges.length, B = C._calloc(Q, SIZE_OF_RANGE); let A = B; for (let I = 0; I < Q; I++)marshalRange(A, g.includedRanges[I]), A += SIZE_OF_RANGE } const E = C._ts_parser_parse_wasm(this[0], this[1], I ? I[0] : 0, B, Q); if (!E) throw currentParseCallback = null, currentLogCallback = null, new Error("Parsing failed"); const o = new Tree(INTERNAL, E, this.language, currentParseCallback); return currentParseCallback = null, currentLogCallback = null, o } reset() { C._ts_parser_reset(this[0]) } getIncludedRanges() { C._ts_parser_included_ranges_wasm(this[0]); const A = getValue(TRANSFER_BUFFER, "i32"), I = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), g = new Array(A); if (A > 0) { let Q = I; for (let I = 0; I < A; I++)g[I] = unmarshalRange(Q), Q += SIZE_OF_RANGE; C._free(I) } return g } getTimeoutMicros() { return C._ts_parser_timeout_micros(this[0]) } setTimeoutMicros(A) { C._ts_parser_set_timeout_micros(this[0], A) } setLogger(A) { if (A) { if ("function" != typeof A) throw new Error("Logger callback must be a function") } else A = null; return this.logCallback = A, this } getLogger() { return this.logCallback } } class Tree { constructor(A, I, g, Q) { assertInternal(A), this[0] = I, this.language = g, this.textCallback = Q } copy() { const A = C._ts_tree_copy(this[0]); return new Tree(INTERNAL, A, this.language, this.textCallback) } delete() { C._ts_tree_delete(this[0]), this[0] = 0 } edit(A) { marshalEdit(A), C._ts_tree_edit_wasm(this[0]) } get rootNode() { return C._ts_tree_root_node_wasm(this[0]), unmarshalNode(this) } rootNodeWithOffset(A, I) { const g = TRANSFER_BUFFER + SIZE_OF_NODE; return setValue(g, A, "i32"), marshalPoint(g + SIZE_OF_INT, I), C._ts_tree_root_node_with_offset_wasm(this[0]), unmarshalNode(this) } getLanguage() { return this.language } walk() { return this.rootNode.walk() } getChangedRanges(A) { if (A.constructor !== Tree) throw new TypeError("Argument must be a Tree"); C._ts_tree_get_changed_ranges_wasm(this[0], A[0]); const I = getValue(TRANSFER_BUFFER, "i32"), g = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), Q = new Array(I); if (I > 0) { let A = g; for (let g = 0; g < I; g++)Q[g] = unmarshalRange(A), A += SIZE_OF_RANGE; C._free(g) } return Q } getIncludedRanges() { C._ts_tree_included_ranges_wasm(this[0]); const A = getValue(TRANSFER_BUFFER, "i32"), I = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), g = new Array(A); if (A > 0) { let Q = I; for (let I = 0; I < A; I++)g[I] = unmarshalRange(Q), Q += SIZE_OF_RANGE; C._free(I) } return g } } class Node { constructor(A, I) { assertInternal(A), this.tree = I } get typeId() { return marshalNode(this), C._ts_node_symbol_wasm(this.tree[0]) } get grammarId() { return marshalNode(this), C._ts_node_grammar_symbol_wasm(this.tree[0]) } get type() { return this.tree.language.types[this.typeId] || "ERROR" } get grammarType() { return this.tree.language.types[this.grammarId] || "ERROR" } get endPosition() { return marshalNode(this), C._ts_node_end_point_wasm(this.tree[0]), unmarshalPoint(TRANSFER_BUFFER) } get endIndex() { return marshalNode(this), C._ts_node_end_index_wasm(this.tree[0]) } get text() { return getText(this.tree, this.startIndex, this.endIndex) } get parseState() { return marshalNode(this), C._ts_node_parse_state_wasm(this.tree[0]) } get nextParseState() { return marshalNode(this), C._ts_node_next_parse_state_wasm(this.tree[0]) } get isNamed() { return marshalNode(this), 1 === C._ts_node_is_named_wasm(this.tree[0]) } get hasError() { return marshalNode(this), 1 === C._ts_node_has_error_wasm(this.tree[0]) } get hasChanges() { return marshalNode(this), 1 === C._ts_node_has_changes_wasm(this.tree[0]) } get isError() { return marshalNode(this), 1 === C._ts_node_is_error_wasm(this.tree[0]) } get isMissing() { return marshalNode(this), 1 === C._ts_node_is_missing_wasm(this.tree[0]) } get isExtra() { return marshalNode(this), 1 === C._ts_node_is_extra_wasm(this.tree[0]) } equals(A) { return this.id === A.id } child(A) { return marshalNode(this), C._ts_node_child_wasm(this.tree[0], A), unmarshalNode(this.tree) } namedChild(A) { return marshalNode(this), C._ts_node_named_child_wasm(this.tree[0], A), unmarshalNode(this.tree) } childForFieldId(A) { return marshalNode(this), C._ts_node_child_by_field_id_wasm(this.tree[0], A), unmarshalNode(this.tree) } childForFieldName(A) { const I = this.tree.language.fields.indexOf(A); return -1 !== I ? this.childForFieldId(I) : null } fieldNameForChild(A) { marshalNode(this); const I = C._ts_node_field_name_for_child_wasm(this.tree[0], A); if (!I) return null; return AsciiToString(I) } childrenForFieldName(A) { const I = this.tree.language.fields.indexOf(A); return -1 !== I && 0 !== I ? this.childrenForFieldId(I) : [] } childrenForFieldId(A) { marshalNode(this), C._ts_node_children_by_field_id_wasm(this.tree[0], A); const I = getValue(TRANSFER_BUFFER, "i32"), g = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), Q = new Array(I); if (I > 0) { let A = g; for (let g = 0; g < I; g++)Q[g] = unmarshalNode(this.tree, A), A += SIZE_OF_NODE; C._free(g) } return Q } firstChildForIndex(A) { marshalNode(this); return setValue(TRANSFER_BUFFER + SIZE_OF_NODE, A, "i32"), C._ts_node_first_child_for_byte_wasm(this.tree[0]), unmarshalNode(this.tree) } firstNamedChildForIndex(A) { marshalNode(this); return setValue(TRANSFER_BUFFER + SIZE_OF_NODE, A, "i32"), C._ts_node_first_named_child_for_byte_wasm(this.tree[0]), unmarshalNode(this.tree) } get childCount() { return marshalNode(this), C._ts_node_child_count_wasm(this.tree[0]) } get namedChildCount() { return marshalNode(this), C._ts_node_named_child_count_wasm(this.tree[0]) } get firstChild() { return this.child(0) } get firstNamedChild() { return this.namedChild(0) } get lastChild() { return this.child(this.childCount - 1) } get lastNamedChild() { return this.namedChild(this.namedChildCount - 1) } get children() { if (!this._children) { marshalNode(this), C._ts_node_children_wasm(this.tree[0]); const A = getValue(TRANSFER_BUFFER, "i32"), I = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"); if (this._children = new Array(A), A > 0) { let g = I; for (let I = 0; I < A; I++)this._children[I] = unmarshalNode(this.tree, g), g += SIZE_OF_NODE; C._free(I) } } return this._children } get namedChildren() { if (!this._namedChildren) { marshalNode(this), C._ts_node_named_children_wasm(this.tree[0]); const A = getValue(TRANSFER_BUFFER, "i32"), I = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"); if (this._namedChildren = new Array(A), A > 0) { let g = I; for (let I = 0; I < A; I++)this._namedChildren[I] = unmarshalNode(this.tree, g), g += SIZE_OF_NODE; C._free(I) } } return this._namedChildren } descendantsOfType(A, I, g) { Array.isArray(A) || (A = [A]), I || (I = ZERO_POINT), g || (g = ZERO_POINT); const Q = [], B = this.tree.language.types; for (let I = 0, g = B.length; I < g; I++)A.includes(B[I]) && Q.push(I); const E = C._malloc(SIZE_OF_INT * Q.length); for (let A = 0, I = Q.length; A < I; A++)setValue(E + A * SIZE_OF_INT, Q[A], "i32"); marshalNode(this), C._ts_node_descendants_of_type_wasm(this.tree[0], E, Q.length, I.row, I.column, g.row, g.column); const o = getValue(TRANSFER_BUFFER, "i32"), s = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), e = new Array(o); if (o > 0) { let A = s; for (let I = 0; I < o; I++)e[I] = unmarshalNode(this.tree, A), A += SIZE_OF_NODE } return C._free(s), C._free(E), e } get nextSibling() { return marshalNode(this), C._ts_node_next_sibling_wasm(this.tree[0]), unmarshalNode(this.tree) } get previousSibling() { return marshalNode(this), C._ts_node_prev_sibling_wasm(this.tree[0]), unmarshalNode(this.tree) } get nextNamedSibling() { return marshalNode(this), C._ts_node_next_named_sibling_wasm(this.tree[0]), unmarshalNode(this.tree) } get previousNamedSibling() { return marshalNode(this), C._ts_node_prev_named_sibling_wasm(this.tree[0]), unmarshalNode(this.tree) } get descendantCount() { return marshalNode(this), C._ts_node_descendant_count_wasm(this.tree[0]) } get parent() { return marshalNode(this), C._ts_node_parent_wasm(this.tree[0]), unmarshalNode(this.tree) } descendantForIndex(A, I = A) { if ("number" != typeof A || "number" != typeof I) throw new Error("Arguments must be numbers"); marshalNode(this); const g = TRANSFER_BUFFER + SIZE_OF_NODE; return setValue(g, A, "i32"), setValue(g + SIZE_OF_INT, I, "i32"), C._ts_node_descendant_for_index_wasm(this.tree[0]), unmarshalNode(this.tree) } namedDescendantForIndex(A, I = A) { if ("number" != typeof A || "number" != typeof I) throw new Error("Arguments must be numbers"); marshalNode(this); const g = TRANSFER_BUFFER + SIZE_OF_NODE; return setValue(g, A, "i32"), setValue(g + SIZE_OF_INT, I, "i32"), C._ts_node_named_descendant_for_index_wasm(this.tree[0]), unmarshalNode(this.tree) } descendantForPosition(A, I = A) { if (!isPoint(A) || !isPoint(I)) throw new Error("Arguments must be {row, column} objects"); marshalNode(this); const g = TRANSFER_BUFFER + SIZE_OF_NODE; return marshalPoint(g, A), marshalPoint(g + SIZE_OF_POINT, I), C._ts_node_descendant_for_position_wasm(this.tree[0]), unmarshalNode(this.tree) } namedDescendantForPosition(A, I = A) { if (!isPoint(A) || !isPoint(I)) throw new Error("Arguments must be {row, column} objects"); marshalNode(this); const g = TRANSFER_BUFFER + SIZE_OF_NODE; return marshalPoint(g, A), marshalPoint(g + SIZE_OF_POINT, I), C._ts_node_named_descendant_for_position_wasm(this.tree[0]), unmarshalNode(this.tree) } walk() { return marshalNode(this), C._ts_tree_cursor_new_wasm(this.tree[0]), new TreeCursor(INTERNAL, this.tree) } toString() { marshalNode(this); const A = C._ts_node_to_string_wasm(this.tree[0]), I = AsciiToString(A); return C._free(A), I } } class TreeCursor { constructor(A, I) { assertInternal(A), this.tree = I, unmarshalTreeCursor(this) } delete() { marshalTreeCursor(this), C._ts_tree_cursor_delete_wasm(this.tree[0]), this[0] = this[1] = this[2] = 0 } reset(A) { marshalNode(A), marshalTreeCursor(this, TRANSFER_BUFFER + SIZE_OF_NODE), C._ts_tree_cursor_reset_wasm(this.tree[0]), unmarshalTreeCursor(this) } resetTo(A) { marshalTreeCursor(this, TRANSFER_BUFFER), marshalTreeCursor(A, TRANSFER_BUFFER + SIZE_OF_CURSOR), C._ts_tree_cursor_reset_to_wasm(this.tree[0], A.tree[0]), unmarshalTreeCursor(this) } get nodeType() { return this.tree.language.types[this.nodeTypeId] || "ERROR" } get nodeTypeId() { return marshalTreeCursor(this), C._ts_tree_cursor_current_node_type_id_wasm(this.tree[0]) } get nodeStateId() { return marshalTreeCursor(this), C._ts_tree_cursor_current_node_state_id_wasm(this.tree[0]) } get nodeId() { return marshalTreeCursor(this), C._ts_tree_cursor_current_node_id_wasm(this.tree[0]) } get nodeIsNamed() { return marshalTreeCursor(this), 1 === C._ts_tree_cursor_current_node_is_named_wasm(this.tree[0]) } get nodeIsMissing() { return marshalTreeCursor(this), 1 === C._ts_tree_cursor_current_node_is_missing_wasm(this.tree[0]) } get nodeText() { marshalTreeCursor(this); const A = C._ts_tree_cursor_start_index_wasm(this.tree[0]), I = C._ts_tree_cursor_end_index_wasm(this.tree[0]); return getText(this.tree, A, I) } get startPosition() { return marshalTreeCursor(this), C._ts_tree_cursor_start_position_wasm(this.tree[0]), unmarshalPoint(TRANSFER_BUFFER) } get endPosition() { return marshalTreeCursor(this), C._ts_tree_cursor_end_position_wasm(this.tree[0]), unmarshalPoint(TRANSFER_BUFFER) } get startIndex() { return marshalTreeCursor(this), C._ts_tree_cursor_start_index_wasm(this.tree[0]) } get endIndex() { return marshalTreeCursor(this), C._ts_tree_cursor_end_index_wasm(this.tree[0]) } get currentNode() { return marshalTreeCursor(this), C._ts_tree_cursor_current_node_wasm(this.tree[0]), unmarshalNode(this.tree) } get currentFieldId() { return marshalTreeCursor(this), C._ts_tree_cursor_current_field_id_wasm(this.tree[0]) } get currentFieldName() { return this.tree.language.fields[this.currentFieldId] } get currentDepth() { return marshalTreeCursor(this), C._ts_tree_cursor_current_depth_wasm(this.tree[0]) } get currentDescendantIndex() { return marshalTreeCursor(this), C._ts_tree_cursor_current_descendant_index_wasm(this.tree[0]) } gotoFirstChild() { marshalTreeCursor(this); const A = C._ts_tree_cursor_goto_first_child_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === A } gotoLastChild() { marshalTreeCursor(this); const A = C._ts_tree_cursor_goto_last_child_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === A } gotoFirstChildForIndex(A) { marshalTreeCursor(this), setValue(TRANSFER_BUFFER + SIZE_OF_CURSOR, A, "i32"); const I = C._ts_tree_cursor_goto_first_child_for_index_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === I } gotoFirstChildForPosition(A) { marshalTreeCursor(this), marshalPoint(TRANSFER_BUFFER + SIZE_OF_CURSOR, A); const I = C._ts_tree_cursor_goto_first_child_for_position_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === I } gotoNextSibling() { marshalTreeCursor(this); const A = C._ts_tree_cursor_goto_next_sibling_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === A } gotoPreviousSibling() { marshalTreeCursor(this); const A = C._ts_tree_cursor_goto_previous_sibling_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === A } gotoDescendant(A) { marshalTreeCursor(this), C._ts_tree_cursor_goto_descendant_wasm(this.tree[0], A), unmarshalTreeCursor(this) } gotoParent() { marshalTreeCursor(this); const A = C._ts_tree_cursor_goto_parent_wasm(this.tree[0]); return unmarshalTreeCursor(this), 1 === A } } class Language { constructor(A, I) { assertInternal(A), this[0] = I, this.types = new Array(C._ts_language_symbol_count(this[0])); for (let A = 0, I = this.types.length; A < I; A++)C._ts_language_symbol_type(this[0], A) < 2 && (this.types[A] = UTF8ToString(C._ts_language_symbol_name(this[0], A))); this.fields = new Array(C._ts_language_field_count(this[0]) + 1); for (let A = 0, I = this.fields.length; A < I; A++) { const I = C._ts_language_field_name_for_id(this[0], A); this.fields[A] = 0 !== I ? UTF8ToString(I) : null } } get version() { return C._ts_language_version(this[0]) } get fieldCount() { return this.fields.length - 1 } get stateCount() { return C._ts_language_state_count(this[0]) } fieldIdForName(A) { const I = this.fields.indexOf(A); return -1 !== I ? I : null } fieldNameForId(A) { return this.fields[A] || null } idForNodeType(A, I) { const g = lengthBytesUTF8(A), Q = C._malloc(g + 1); stringToUTF8(A, Q, g + 1); const B = C._ts_language_symbol_for_name(this[0], Q, g, I); return C._free(Q), B || null } get nodeTypeCount() { return C._ts_language_symbol_count(this[0]) } nodeTypeForId(A) { const I = C._ts_language_symbol_name(this[0], A); return I ? UTF8ToString(I) : null } nodeTypeIsNamed(A) { return !!C._ts_language_type_is_named_wasm(this[0], A) } nodeTypeIsVisible(A) { return !!C._ts_language_type_is_visible_wasm(this[0], A) } nextState(A, I) { return C._ts_language_next_state(this[0], A, I) } lookaheadIterator(A) { const I = C._ts_lookahead_iterator_new(this[0], A); return I ? new LookaheadIterable(INTERNAL, I, this) : null } query(A) { const I = lengthBytesUTF8(A), g = C._malloc(I + 1); stringToUTF8(A, g, I + 1); const Q = C._ts_query_new(this[0], g, I, TRANSFER_BUFFER, TRANSFER_BUFFER + SIZE_OF_INT); if (!Q) { const I = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), Q = getValue(TRANSFER_BUFFER, "i32"), B = UTF8ToString(g, Q).length, E = A.substr(B, 100).split("\n")[0]; let o, s = E.match(QUERY_WORD_REGEX)[0]; switch (I) { case 2: o = new RangeError(`Bad node name '${s}'`); break; case 3: o = new RangeError(`Bad field name '${s}'`); break; case 4: o = new RangeError(`Bad capture name @${s}`); break; case 5: o = new TypeError(`Bad pattern structure at offset ${B}: '${E}'...`), s = ""; break; default: o = new SyntaxError(`Bad syntax at offset ${B}: '${E}'...`), s = "" }throw o.index = B, o.length = s.length, C._free(g), o } const B = C._ts_query_string_count(Q), E = C._ts_query_capture_count(Q), o = C._ts_query_pattern_count(Q), s = new Array(E), e = new Array(B); for (let A = 0; A < E; A++) { const I = C._ts_query_capture_name_for_id(Q, A, TRANSFER_BUFFER), g = getValue(TRANSFER_BUFFER, "i32"); s[A] = UTF8ToString(I, g) } for (let A = 0; A < B; A++) { const I = C._ts_query_string_value_for_id(Q, A, TRANSFER_BUFFER), g = getValue(TRANSFER_BUFFER, "i32"); e[A] = UTF8ToString(I, g) } const D = new Array(o), w = new Array(o), a = new Array(o), t = new Array(o), r = new Array(o); for (let A = 0; A < o; A++) { const I = C._ts_query_predicates_for_pattern(Q, A, TRANSFER_BUFFER), g = getValue(TRANSFER_BUFFER, "i32"); t[A] = [], r[A] = []; const B = []; let E = I; for (let I = 0; I < g; I++) { const I = getValue(E, "i32"); E += SIZE_OF_INT; const g = getValue(E, "i32"); if (E += SIZE_OF_INT, I === PREDICATE_STEP_TYPE_CAPTURE) B.push({ type: "capture", name: s[g] }); else if (I === PREDICATE_STEP_TYPE_STRING) B.push({ type: "string", value: e[g] }); else if (B.length > 0) { if ("string" !== B[0].type) throw new Error("Predicates must begin with a literal value"); const I = B[0].value; let g, Q = !0, E = !0; switch (I) { case "any-not-eq?": case "not-eq?": Q = !1; case "any-eq?": case "eq?": if (3 !== B.length) throw new Error(`Wrong number of arguments to \`#${I}\` predicate. Expected 2, got ${B.length - 1}`); if ("capture" !== B[1].type) throw new Error(`First argument of \`#${I}\` predicate must be a capture. Got "${B[1].value}"`); if (E = !I.startsWith("any-"), "capture" === B[2].type) { const I = B[1].name, g = B[2].name; r[A].push((A => { const B = [], o = []; for (const Q of A) Q.name === I && B.push(Q.node), Q.name === g && o.push(Q.node); const s = (A, I, g) => g ? A.text === I.text : A.text !== I.text; return E ? B.every((A => o.some((I => s(A, I, Q))))) : B.some((A => o.some((I => s(A, I, Q))))) })) } else { g = B[1].name; const I = B[2].value, o = A => A.text === I, s = A => A.text !== I; r[A].push((A => { const I = []; for (const Q of A) Q.name === g && I.push(Q.node); const B = Q ? o : s; return E ? I.every(B) : I.some(B) })) } break; case "any-not-match?": case "not-match?": Q = !1; case "any-match?": case "match?": if (3 !== B.length) throw new Error(`Wrong number of arguments to \`#${I}\` predicate. Expected 2, got ${B.length - 1}.`); if ("capture" !== B[1].type) throw new Error(`First argument of \`#${I}\` predicate must be a capture. Got "${B[1].value}".`); if ("string" !== B[2].type) throw new Error(`Second argument of \`#${I}\` predicate must be a string. Got @${B[2].value}.`); g = B[1].name; const o = new RegExp(B[2].value); E = !I.startsWith("any-"), r[A].push((A => { const I = []; for (const Q of A) Q.name === g && I.push(Q.node.text); const B = (A, I) => I ? o.test(A) : !o.test(A); return 0 === I.length ? !Q : E ? I.every((A => B(A, Q))) : I.some((A => B(A, Q))) })); break; case "set!": if (B.length < 2 || B.length > 3) throw new Error(`Wrong number of arguments to \`#set!\` predicate. Expected 1 or 2. Got ${B.length - 1}.`); if (B.some((A => "string" !== A.type))) throw new Error('Arguments to `#set!` predicate must be a strings.".'); D[A] || (D[A] = {}), D[A][B[1].value] = B[2] ? B[2].value : null; break; case "is?": case "is-not?": if (B.length < 2 || B.length > 3) throw new Error(`Wrong number of arguments to \`#${I}\` predicate. Expected 1 or 2. Got ${B.length - 1}.`); if (B.some((A => "string" !== A.type))) throw new Error(`Arguments to \`#${I}\` predicate must be a strings.".`); const s = "is?" === I ? w : a; s[A] || (s[A] = {}), s[A][B[1].value] = B[2] ? B[2].value : null; break; case "not-any-of?": Q = !1; case "any-of?": if (B.length < 2) throw new Error(`Wrong number of arguments to \`#${I}\` predicate. Expected at least 1. Got ${B.length - 1}.`); if ("capture" !== B[1].type) throw new Error(`First argument of \`#${I}\` predicate must be a capture. Got "${B[1].value}".`); for (let A = 2; A < B.length; A++)if ("string" !== B[A].type) throw new Error(`Arguments to \`#${I}\` predicate must be a strings.".`); g = B[1].name; const e = B.slice(2).map((A => A.value)); r[A].push((A => { const I = []; for (const Q of A) Q.name === g && I.push(Q.node.text); return 0 === I.length ? !Q : I.every((A => e.includes(A))) === Q })); break; default: t[A].push({ operator: I, operands: B.slice(1) }) }B.length = 0 } } Object.freeze(D[A]), Object.freeze(w[A]), Object.freeze(a[A]) } return C._free(g), new Query(INTERNAL, Q, s, r, t, Object.freeze(D), Object.freeze(w), Object.freeze(a)) } static load(A) { let I; if (A instanceof Uint8Array) I = Promise.resolve(A); else { const g = A; if ("undefined" != typeof process && process.versions && process.versions.node) { const A = require("fs"); I = Promise.resolve(A.readFileSync(g)) } else I = fetch(g).then((A => A.arrayBuffer().then((I => { if (A.ok) return new Uint8Array(I); { const g = new TextDecoder("utf-8").decode(I); throw new Error(`Language.load failed with status ${A.status}.\n\n${g}`) } })))) } return I.then((A => loadWebAssemblyModule(A, { loadAsync: !0 }))).then((A => { const I = Object.keys(A), g = I.find((A => LANGUAGE_FUNCTION_REGEX.test(A) && !A.includes("external_scanner_"))); g || console.log(`Couldn't find language function in WASM file. Symbols:\n${JSON.stringify(I, null, 2)}`); const Q = A[g](); return new Language(INTERNAL, Q) })) } } class LookaheadIterable { constructor(A, I, g) { assertInternal(A), this[0] = I, this.language = g } get currentTypeId() { return C._ts_lookahead_iterator_current_symbol(this[0]) } get currentType() { return this.language.types[this.currentTypeId] || "ERROR" } delete() { C._ts_lookahead_iterator_delete(this[0]), this[0] = 0 } resetState(A) { return C._ts_lookahead_iterator_reset_state(this[0], A) } reset(A, I) { return !!C._ts_lookahead_iterator_reset(this[0], A[0], I) && (this.language = A, !0) } [Symbol.iterator]() { const A = this; return { next: () => C._ts_lookahead_iterator_next(A[0]) ? { done: !1, value: A.currentType } : { done: !0, value: "" } } } } class Query { constructor(A, I, g, Q, B, E, o, s) { assertInternal(A), this[0] = I, this.captureNames = g, this.textPredicates = Q, this.predicates = B, this.setProperties = E, this.assertedProperties = o, this.refutedProperties = s, this.exceededMatchLimit = !1 } delete() { C._ts_query_delete(this[0]), this[0] = 0 } matches(A, { startPosition: I = ZERO_POINT, endPosition: g = ZERO_POINT, startIndex: Q = 0, endIndex: B = 0, matchLimit: E = 4294967295, maxStartDepth: o = 4294967295 } = {}) { if ("number" != typeof E) throw new Error("Arguments must be numbers"); marshalNode(A), C._ts_query_matches_wasm(this[0], A.tree[0], I.row, I.column, g.row, g.column, Q, B, E, o); const s = getValue(TRANSFER_BUFFER, "i32"), e = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), D = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, "i32"), w = new Array(s); this.exceededMatchLimit = Boolean(D); let a = 0, t = e; for (let I = 0; I < s; I++) { const I = getValue(t, "i32"); t += SIZE_OF_INT; const g = getValue(t, "i32"); t += SIZE_OF_INT; const Q = new Array(g); if (t = unmarshalCaptures(this, A.tree, t, Q), this.textPredicates[I].every((A => A(Q)))) { w[a] = { pattern: I, captures: Q }; const A = this.setProperties[I]; A && (w[a].setProperties = A); const g = this.assertedProperties[I]; g && (w[a].assertedProperties = g); const B = this.refutedProperties[I]; B && (w[a].refutedProperties = B), a++ } } return w.length = a, C._free(e), w } captures(A, { startPosition: I = ZERO_POINT, endPosition: g = ZERO_POINT, startIndex: Q = 0, endIndex: B = 0, matchLimit: E = 4294967295, maxStartDepth: o = 4294967295 } = {}) { if ("number" != typeof E) throw new Error("Arguments must be numbers"); marshalNode(A), C._ts_query_captures_wasm(this[0], A.tree[0], I.row, I.column, g.row, g.column, Q, B, E, o); const s = getValue(TRANSFER_BUFFER, "i32"), e = getValue(TRANSFER_BUFFER + SIZE_OF_INT, "i32"), D = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, "i32"), w = []; this.exceededMatchLimit = Boolean(D); const a = []; let t = e; for (let I = 0; I < s; I++) { const I = getValue(t, "i32"); t += SIZE_OF_INT; const g = getValue(t, "i32"); t += SIZE_OF_INT; const Q = getValue(t, "i32"); if (t += SIZE_OF_INT, a.length = g, t = unmarshalCaptures(this, A.tree, t, a), this.textPredicates[I].every((A => A(a)))) { const A = a[Q], g = this.setProperties[I]; g && (A.setProperties = g); const B = this.assertedProperties[I]; B && (A.assertedProperties = B); const E = this.refutedProperties[I]; E && (A.refutedProperties = E), w.push(A) } } return C._free(e), w } predicatesForPattern(A) { return this.predicates[A] } disableCapture(A) { const I = lengthBytesUTF8(A), g = C._malloc(I + 1); stringToUTF8(A, g, I + 1), C._ts_query_disable_capture(this[0], g, I), C._free(g) } didExceedMatchLimit() { return this.exceededMatchLimit } } function getText(A, I, g) { const Q = g - I; let B = A.textCallback(I, null, g); for (I += B.length; I < g;) { const Q = A.textCallback(I, null, g); if (!(Q && Q.length > 0)) break; I += Q.length, B += Q } return I > g && (B = B.slice(0, Q)), B } function unmarshalCaptures(A, I, g, Q) { for (let B = 0, E = Q.length; B < E; B++) { const E = getValue(g, "i32"), o = unmarshalNode(I, g += SIZE_OF_INT); g += SIZE_OF_NODE, Q[B] = { name: A.captureNames[E], node: o } } return g } function assertInternal(A) { if (A !== INTERNAL) throw new Error("Illegal constructor") } function isPoint(A) { return A && "number" == typeof A.row && "number" == typeof A.column } function marshalNode(A) { let I = TRANSFER_BUFFER; setValue(I, A.id, "i32"), I += SIZE_OF_INT, setValue(I, A.startIndex, "i32"), I += SIZE_OF_INT, setValue(I, A.startPosition.row, "i32"), I += SIZE_OF_INT, setValue(I, A.startPosition.column, "i32"), I += SIZE_OF_INT, setValue(I, A[0], "i32") } function unmarshalNode(A, I = TRANSFER_BUFFER) { const g = getValue(I, "i32"); if (0 === g) return null; const Q = getValue(I += SIZE_OF_INT, "i32"), B = getValue(I += SIZE_OF_INT, "i32"), E = getValue(I += SIZE_OF_INT, "i32"), o = getValue(I += SIZE_OF_INT, "i32"), s = new Node(INTERNAL, A); return s.id = g, s.startIndex = Q, s.startPosition = { row: B, column: E }, s[0] = o, s } function marshalTreeCursor(A, I = TRANSFER_BUFFER) { setValue(I + 0 * SIZE_OF_INT, A[0], "i32"), setValue(I + 1 * SIZE_OF_INT, A[1], "i32"), setValue(I + 2 * SIZE_OF_INT, A[2], "i32"), setValue(I + 3 * SIZE_OF_INT, A[3], "i32") } function unmarshalTreeCursor(A) { A[0] = getValue(TRANSFER_BUFFER + 0 * SIZE_OF_INT, "i32"), A[1] = getValue(TRANSFER_BUFFER + 1 * SIZE_OF_INT, "i32"), A[2] = getValue(TRANSFER_BUFFER + 2 * SIZE_OF_INT, "i32"), A[3] = getValue(TRANSFER_BUFFER + 3 * SIZE_OF_INT, "i32") } function marshalPoint(A, I) { setValue(A, I.row, "i32"), setValue(A + SIZE_OF_INT, I.column, "i32") } function unmarshalPoint(A) { return { row: getValue(A, "i32") >>> 0, column: getValue(A + SIZE_OF_INT, "i32") >>> 0 } } function marshalRange(A, I) { marshalPoint(A, I.startPosition), marshalPoint(A += SIZE_OF_POINT, I.endPosition), setValue(A += SIZE_OF_POINT, I.startIndex, "i32"), setValue(A += SIZE_OF_INT, I.endIndex, "i32"), A += SIZE_OF_INT } function unmarshalRange(A) { const I = {}; return I.startPosition = unmarshalPoint(A), A += SIZE_OF_POINT, I.endPosition = unmarshalPoint(A), A += SIZE_OF_POINT, I.startIndex = getValue(A, "i32") >>> 0, A += SIZE_OF_INT, I.endIndex = getValue(A, "i32") >>> 0, I } function marshalEdit(A) { let I = TRANSFER_BUFFER; marshalPoint(I, A.startPosition), I += SIZE_OF_POINT, marshalPoint(I, A.oldEndPosition), I += SIZE_OF_POINT, marshalPoint(I, A.newEndPosition), I += SIZE_OF_POINT, setValue(I, A.startIndex, "i32"), I += SIZE_OF_INT, setValue(I, A.oldEndIndex, "i32"), I += SIZE_OF_INT, setValue(I, A.newEndIndex, "i32"), I += SIZE_OF_INT } for (const A of Object.getOwnPropertyNames(ParserImpl.prototype)) Object.defineProperty(Parser.prototype, A, { value: ParserImpl.prototype[A], enumerable: !1, writable: !1 }); Parser.Language = Language, Module.onRuntimeInitialized = () => { ParserImpl.init(), resolveInitPromise() } }))) } } return Parser }(); "object" == typeof exports && (module.exports = TreeSitter);
